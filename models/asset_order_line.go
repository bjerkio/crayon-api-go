// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AssetOrderLine asset order line
//
// swagger:model AssetOrderLine
type AssetOrderLine struct {

	// arm region name
	ArmRegionName string `json:"ArmRegionName,omitempty"`

	// billing cycle
	// Enum: [Unknown Monthly Annual None OneTime]
	BillingCycle string `json:"BillingCycle,omitempty"`

	// catalog item Id
	CatalogItemID string `json:"CatalogItemId,omitempty"`

	// errors
	Errors []*AssetOrderLineError `json:"Errors"`

	// product Id
	ProductID string `json:"ProductId,omitempty"`

	// product variant Id
	ProductVariantID int32 `json:"ProductVariantId,omitempty"`

	// provisioning context
	ProvisioningContext map[string]string `json:"ProvisioningContext,omitempty"`

	// quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// requires inventory check
	RequiresInventoryCheck bool `json:"RequiresInventoryCheck,omitempty"`

	// reseller price type
	// Enum: [None Margin Markup FixedPrice ListPrice]
	ResellerPriceType string `json:"ResellerPriceType,omitempty"`

	// reseller price type value
	ResellerPriceTypeValue float64 `json:"ResellerPriceTypeValue,omitempty"`

	// scope
	// Enum: [Shared Single]
	Scope string `json:"Scope,omitempty"`

	// sku Id
	SkuID string `json:"SkuId,omitempty"`

	// subscription Id
	SubscriptionID int32 `json:"SubscriptionId,omitempty"`

	// tags
	Tags *AssetTags `json:"Tags,omitempty"`

	// term duration
	TermDuration string `json:"TermDuration,omitempty"`

	// type
	// Enum: [Reservation Software Subscription]
	Type string `json:"Type,omitempty"`
}

// Validate validates this asset order line
func (m *AssetOrderLine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateErrors(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResellerPriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var assetOrderLineTypeBillingCyclePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Monthly","Annual","None","OneTime"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetOrderLineTypeBillingCyclePropEnum = append(assetOrderLineTypeBillingCyclePropEnum, v)
	}
}

const (

	// AssetOrderLineBillingCycleUnknown captures enum value "Unknown"
	AssetOrderLineBillingCycleUnknown string = "Unknown"

	// AssetOrderLineBillingCycleMonthly captures enum value "Monthly"
	AssetOrderLineBillingCycleMonthly string = "Monthly"

	// AssetOrderLineBillingCycleAnnual captures enum value "Annual"
	AssetOrderLineBillingCycleAnnual string = "Annual"

	// AssetOrderLineBillingCycleNone captures enum value "None"
	AssetOrderLineBillingCycleNone string = "None"

	// AssetOrderLineBillingCycleOneTime captures enum value "OneTime"
	AssetOrderLineBillingCycleOneTime string = "OneTime"
)

// prop value enum
func (m *AssetOrderLine) validateBillingCycleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetOrderLineTypeBillingCyclePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetOrderLine) validateBillingCycle(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingCycle) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingCycleEnum("BillingCycle", "body", m.BillingCycle); err != nil {
		return err
	}

	return nil
}

func (m *AssetOrderLine) validateErrors(formats strfmt.Registry) error {

	if swag.IsZero(m.Errors) { // not required
		return nil
	}

	for i := 0; i < len(m.Errors); i++ {
		if swag.IsZero(m.Errors[i]) { // not required
			continue
		}

		if m.Errors[i] != nil {
			if err := m.Errors[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Errors" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var assetOrderLineTypeResellerPriceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Margin","Markup","FixedPrice","ListPrice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetOrderLineTypeResellerPriceTypePropEnum = append(assetOrderLineTypeResellerPriceTypePropEnum, v)
	}
}

const (

	// AssetOrderLineResellerPriceTypeNone captures enum value "None"
	AssetOrderLineResellerPriceTypeNone string = "None"

	// AssetOrderLineResellerPriceTypeMargin captures enum value "Margin"
	AssetOrderLineResellerPriceTypeMargin string = "Margin"

	// AssetOrderLineResellerPriceTypeMarkup captures enum value "Markup"
	AssetOrderLineResellerPriceTypeMarkup string = "Markup"

	// AssetOrderLineResellerPriceTypeFixedPrice captures enum value "FixedPrice"
	AssetOrderLineResellerPriceTypeFixedPrice string = "FixedPrice"

	// AssetOrderLineResellerPriceTypeListPrice captures enum value "ListPrice"
	AssetOrderLineResellerPriceTypeListPrice string = "ListPrice"
)

// prop value enum
func (m *AssetOrderLine) validateResellerPriceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetOrderLineTypeResellerPriceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetOrderLine) validateResellerPriceType(formats strfmt.Registry) error {

	if swag.IsZero(m.ResellerPriceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateResellerPriceTypeEnum("ResellerPriceType", "body", m.ResellerPriceType); err != nil {
		return err
	}

	return nil
}

var assetOrderLineTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Shared","Single"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetOrderLineTypeScopePropEnum = append(assetOrderLineTypeScopePropEnum, v)
	}
}

const (

	// AssetOrderLineScopeShared captures enum value "Shared"
	AssetOrderLineScopeShared string = "Shared"

	// AssetOrderLineScopeSingle captures enum value "Single"
	AssetOrderLineScopeSingle string = "Single"
)

// prop value enum
func (m *AssetOrderLine) validateScopeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetOrderLineTypeScopePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetOrderLine) validateScope(formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("Scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *AssetOrderLine) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Tags")
			}
			return err
		}
	}

	return nil
}

var assetOrderLineTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Reservation","Software","Subscription"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		assetOrderLineTypeTypePropEnum = append(assetOrderLineTypeTypePropEnum, v)
	}
}

const (

	// AssetOrderLineTypeReservation captures enum value "Reservation"
	AssetOrderLineTypeReservation string = "Reservation"

	// AssetOrderLineTypeSoftware captures enum value "Software"
	AssetOrderLineTypeSoftware string = "Software"

	// AssetOrderLineTypeSubscription captures enum value "Subscription"
	AssetOrderLineTypeSubscription string = "Subscription"
)

// prop value enum
func (m *AssetOrderLine) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, assetOrderLineTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AssetOrderLine) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AssetOrderLine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AssetOrderLine) UnmarshalBinary(b []byte) error {
	var res AssetOrderLine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
