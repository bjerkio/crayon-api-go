// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgreementReport agreement report
//
// swagger:model AgreementReport
type AgreementReport struct {

	// agreement
	Agreement *AgreementIdentityReferenceDto `json:"Agreement,omitempty"`

	// has valid agreement term
	HasValidAgreementTerm bool `json:"HasValidAgreementTerm,omitempty"`

	// product container
	ProductContainer *ObjectReferenceDto `json:"ProductContainer,omitempty"`

	// status
	// Enum: [None NotReported ZeroUsageReported UsageReported UsageAndZeroUsageReported]
	Status string `json:"Status,omitempty"`
}

// Validate validates this agreement report
func (m *AgreementReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgreementReport) validateAgreement(formats strfmt.Registry) error {

	if swag.IsZero(m.Agreement) { // not required
		return nil
	}

	if m.Agreement != nil {
		if err := m.Agreement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Agreement")
			}
			return err
		}
	}

	return nil
}

func (m *AgreementReport) validateProductContainer(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductContainer) { // not required
		return nil
	}

	if m.ProductContainer != nil {
		if err := m.ProductContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductContainer")
			}
			return err
		}
	}

	return nil
}

var agreementReportTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","NotReported","ZeroUsageReported","UsageReported","UsageAndZeroUsageReported"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementReportTypeStatusPropEnum = append(agreementReportTypeStatusPropEnum, v)
	}
}

const (

	// AgreementReportStatusNone captures enum value "None"
	AgreementReportStatusNone string = "None"

	// AgreementReportStatusNotReported captures enum value "NotReported"
	AgreementReportStatusNotReported string = "NotReported"

	// AgreementReportStatusZeroUsageReported captures enum value "ZeroUsageReported"
	AgreementReportStatusZeroUsageReported string = "ZeroUsageReported"

	// AgreementReportStatusUsageReported captures enum value "UsageReported"
	AgreementReportStatusUsageReported string = "UsageReported"

	// AgreementReportStatusUsageAndZeroUsageReported captures enum value "UsageAndZeroUsageReported"
	AgreementReportStatusUsageAndZeroUsageReported string = "UsageAndZeroUsageReported"
)

// prop value enum
func (m *AgreementReport) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementReportTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgreementReport) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgreementReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgreementReport) UnmarshalBinary(b []byte) error {
	var res AgreementReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
