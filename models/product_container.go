// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductContainer product container
//
// swagger:model ProductContainer
type ProductContainer struct {

	// active draft
	ActiveDraft bool `json:"ActiveDraft,omitempty"`

	// ax contact user Id
	AxContactUserID string `json:"AxContactUserId,omitempty"`

	// category
	// Enum: [None Seat Report]
	Category string `json:"Category,omitempty"`

	// comments
	Comments []*ProductContainerComment `json:"Comments"`

	// contact user
	ContactUser *UserProfile `json:"ContactUser,omitempty"`

	// created by user Id
	CreatedByUserID string `json:"CreatedByUserId,omitempty"`

	// created date
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"CreatedDate,omitempty"`

	// delivery address
	DeliveryAddress *AddressData `json:"DeliveryAddress,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// invoice address
	InvoiceAddress *AddressData `json:"InvoiceAddress,omitempty"`

	// invoice profile
	InvoiceProfile *InvoiceProfile `json:"InvoiceProfile,omitempty"`

	// invoice reference
	InvoiceReference string `json:"InvoiceReference,omitempty"`

	// issues
	Issues []*ProductContainerIssue `json:"Issues"`

	// name
	Name string `json:"Name,omitempty"`

	// note
	Note string `json:"Note,omitempty"`

	// order list Id
	OrderListID int32 `json:"OrderListId,omitempty"`

	// order reference
	OrderReference string `json:"OrderReference,omitempty"`

	// order status changed date
	// Format: date-time
	OrderStatusChangedDate strfmt.DateTime `json:"OrderStatusChangedDate,omitempty"`

	// organization
	Organization *ObjectReference `json:"Organization,omitempty"`

	// product rows
	ProductRows []*ProductRow `json:"ProductRows"`

	// program
	Program *Program `json:"Program,omitempty"`

	// publisher
	Publisher *ObjectReference `json:"Publisher,omitempty"`

	// quote valid to date
	// Format: date-time
	QuoteValidToDate strfmt.DateTime `json:"QuoteValidToDate,omitempty"`

	// removed
	Removed bool `json:"Removed,omitempty"`

	// requisition
	Requisition string `json:"Requisition,omitempty"`

	// sent
	// Read Only: true
	// Format: date-time
	Sent strfmt.DateTime `json:"Sent,omitempty"`

	// submitted by
	// Read Only: true
	SubmittedBy *ProductContainerCommentUser `json:"SubmittedBy,omitempty"`

	// total alternative sales price
	TotalAlternativeSalesPrice []*Price `json:"TotalAlternativeSalesPrice"`

	// total sales price
	TotalSalesPrice []*Price `json:"TotalSalesPrice"`

	// type
	// Enum: [None Draft Request Order Quote Template]
	Type string `json:"Type,omitempty"`

	// usage month
	// Format: date-time
	UsageMonth strfmt.DateTime `json:"UsageMonth,omitempty"`
}

// Validate validates this product container
func (m *ProductContainer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateContactUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeliveryAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderStatusChangedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductRows(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublisher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteValidToDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubmittedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalAlternativeSalesPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalSalesPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageMonth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var productContainerTypeCategoryPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Seat","Report"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productContainerTypeCategoryPropEnum = append(productContainerTypeCategoryPropEnum, v)
	}
}

const (

	// ProductContainerCategoryNone captures enum value "None"
	ProductContainerCategoryNone string = "None"

	// ProductContainerCategorySeat captures enum value "Seat"
	ProductContainerCategorySeat string = "Seat"

	// ProductContainerCategoryReport captures enum value "Report"
	ProductContainerCategoryReport string = "Report"
)

// prop value enum
func (m *ProductContainer) validateCategoryEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productContainerTypeCategoryPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductContainer) validateCategory(formats strfmt.Registry) error {

	if swag.IsZero(m.Category) { // not required
		return nil
	}

	// value enum
	if err := m.validateCategoryEnum("Category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *ProductContainer) validateComments(formats strfmt.Registry) error {

	if swag.IsZero(m.Comments) { // not required
		return nil
	}

	for i := 0; i < len(m.Comments); i++ {
		if swag.IsZero(m.Comments[i]) { // not required
			continue
		}

		if m.Comments[i] != nil {
			if err := m.Comments[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Comments" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductContainer) validateContactUser(formats strfmt.Registry) error {

	if swag.IsZero(m.ContactUser) { // not required
		return nil
	}

	if m.ContactUser != nil {
		if err := m.ContactUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ContactUser")
			}
			return err
		}
	}

	return nil
}

func (m *ProductContainer) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductContainer) validateDeliveryAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.DeliveryAddress) { // not required
		return nil
	}

	if m.DeliveryAddress != nil {
		if err := m.DeliveryAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DeliveryAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ProductContainer) validateInvoiceAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceAddress) { // not required
		return nil
	}

	if m.InvoiceAddress != nil {
		if err := m.InvoiceAddress.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InvoiceAddress")
			}
			return err
		}
	}

	return nil
}

func (m *ProductContainer) validateInvoiceProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceProfile) { // not required
		return nil
	}

	if m.InvoiceProfile != nil {
		if err := m.InvoiceProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InvoiceProfile")
			}
			return err
		}
	}

	return nil
}

func (m *ProductContainer) validateIssues(formats strfmt.Registry) error {

	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	for i := 0; i < len(m.Issues); i++ {
		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {
			if err := m.Issues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductContainer) validateOrderStatusChangedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.OrderStatusChangedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("OrderStatusChangedDate", "body", "date-time", m.OrderStatusChangedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductContainer) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *ProductContainer) validateProductRows(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductRows) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductRows); i++ {
		if swag.IsZero(m.ProductRows[i]) { // not required
			continue
		}

		if m.ProductRows[i] != nil {
			if err := m.ProductRows[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProductRows" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductContainer) validateProgram(formats strfmt.Registry) error {

	if swag.IsZero(m.Program) { // not required
		return nil
	}

	if m.Program != nil {
		if err := m.Program.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Program")
			}
			return err
		}
	}

	return nil
}

func (m *ProductContainer) validatePublisher(formats strfmt.Registry) error {

	if swag.IsZero(m.Publisher) { // not required
		return nil
	}

	if m.Publisher != nil {
		if err := m.Publisher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Publisher")
			}
			return err
		}
	}

	return nil
}

func (m *ProductContainer) validateQuoteValidToDate(formats strfmt.Registry) error {

	if swag.IsZero(m.QuoteValidToDate) { // not required
		return nil
	}

	if err := validate.FormatOf("QuoteValidToDate", "body", "date-time", m.QuoteValidToDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductContainer) validateSent(formats strfmt.Registry) error {

	if swag.IsZero(m.Sent) { // not required
		return nil
	}

	if err := validate.FormatOf("Sent", "body", "date-time", m.Sent.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductContainer) validateSubmittedBy(formats strfmt.Registry) error {

	if swag.IsZero(m.SubmittedBy) { // not required
		return nil
	}

	if m.SubmittedBy != nil {
		if err := m.SubmittedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubmittedBy")
			}
			return err
		}
	}

	return nil
}

func (m *ProductContainer) validateTotalAlternativeSalesPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalAlternativeSalesPrice) { // not required
		return nil
	}

	for i := 0; i < len(m.TotalAlternativeSalesPrice); i++ {
		if swag.IsZero(m.TotalAlternativeSalesPrice[i]) { // not required
			continue
		}

		if m.TotalAlternativeSalesPrice[i] != nil {
			if err := m.TotalAlternativeSalesPrice[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TotalAlternativeSalesPrice" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProductContainer) validateTotalSalesPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.TotalSalesPrice) { // not required
		return nil
	}

	for i := 0; i < len(m.TotalSalesPrice); i++ {
		if swag.IsZero(m.TotalSalesPrice[i]) { // not required
			continue
		}

		if m.TotalSalesPrice[i] != nil {
			if err := m.TotalSalesPrice[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("TotalSalesPrice" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var productContainerTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Draft","Request","Order","Quote","Template"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productContainerTypeTypePropEnum = append(productContainerTypeTypePropEnum, v)
	}
}

const (

	// ProductContainerTypeNone captures enum value "None"
	ProductContainerTypeNone string = "None"

	// ProductContainerTypeDraft captures enum value "Draft"
	ProductContainerTypeDraft string = "Draft"

	// ProductContainerTypeRequest captures enum value "Request"
	ProductContainerTypeRequest string = "Request"

	// ProductContainerTypeOrder captures enum value "Order"
	ProductContainerTypeOrder string = "Order"

	// ProductContainerTypeQuote captures enum value "Quote"
	ProductContainerTypeQuote string = "Quote"

	// ProductContainerTypeTemplate captures enum value "Template"
	ProductContainerTypeTemplate string = "Template"
)

// prop value enum
func (m *ProductContainer) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productContainerTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductContainer) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("Type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ProductContainer) validateUsageMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.UsageMonth) { // not required
		return nil
	}

	if err := validate.FormatOf("UsageMonth", "body", "date-time", m.UsageMonth.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductContainer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductContainer) UnmarshalBinary(b []byte) error {
	var res ProductContainer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
