// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Subscription subscription
//
// swagger:model Subscription
type Subscription struct {

	// available addons count
	AvailableAddonsCount int32 `json:"AvailableAddonsCount,omitempty"`

	// billing cycle
	// Enum: [Unknown Monthly Annual None OneTime BiAnnually TwoYears ThreeYears Quarterly]
	BillingCycle string `json:"BillingCycle,omitempty"`

	// creation date
	// Format: date-time
	CreationDate strfmt.DateTime `json:"CreationDate,omitempty"`

	// customer tenant
	CustomerTenant *CustomerTenantReference `json:"CustomerTenant,omitempty"`

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"EndDate,omitempty"`

	// entitlement Id
	EntitlementID string `json:"EntitlementId,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// invoice profile
	InvoiceProfile *ObjectReference `json:"InvoiceProfile,omitempty"`

	// is trial
	IsTrial bool `json:"IsTrial,omitempty"`

	// markup
	Markup float64 `json:"Markup,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// order Id
	OrderID string `json:"OrderId,omitempty"`

	// organization
	Organization *ObjectReference `json:"Organization,omitempty"`

	// price type
	// Enum: [PurchasePrice ListPrice FixedPrice]
	PriceType string `json:"PriceType,omitempty"`

	// product
	Product *ProductReference `json:"Product,omitempty"`

	// provision type
	// Enum: [None Seat Usage OneTime Crayon AzureMarketplace]
	ProvisionType string `json:"ProvisionType,omitempty"`

	// publisher
	Publisher *ObjectReference `json:"Publisher,omitempty"`

	// publisher subscription Id
	PublisherSubscriptionID string `json:"PublisherSubscriptionId,omitempty"`

	// quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// registered for reserved instance
	RegisteredForReservedInstance bool `json:"RegisteredForReservedInstance,omitempty"`

	// sales price
	SalesPrice float64 `json:"SalesPrice,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"StartDate,omitempty"`

	// status
	// Enum: [None Active Suspended Deleted CustomerCancellation Converted Inactive All]
	Status string `json:"Status,omitempty"`

	// subscription tags
	SubscriptionTags *SubscriptionTags `json:"SubscriptionTags,omitempty"`

	// subscriptions
	Subscriptions []*SubscriptionAddOn `json:"Subscriptions"`
}

// Validate validates this subscription
func (m *Subscription) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingCycle(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvisionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublisher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptionTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscriptions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subscriptionTypeBillingCyclePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Monthly","Annual","None","OneTime","BiAnnually","TwoYears","ThreeYears","Quarterly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionTypeBillingCyclePropEnum = append(subscriptionTypeBillingCyclePropEnum, v)
	}
}

const (

	// SubscriptionBillingCycleUnknown captures enum value "Unknown"
	SubscriptionBillingCycleUnknown string = "Unknown"

	// SubscriptionBillingCycleMonthly captures enum value "Monthly"
	SubscriptionBillingCycleMonthly string = "Monthly"

	// SubscriptionBillingCycleAnnual captures enum value "Annual"
	SubscriptionBillingCycleAnnual string = "Annual"

	// SubscriptionBillingCycleNone captures enum value "None"
	SubscriptionBillingCycleNone string = "None"

	// SubscriptionBillingCycleOneTime captures enum value "OneTime"
	SubscriptionBillingCycleOneTime string = "OneTime"

	// SubscriptionBillingCycleBiAnnually captures enum value "BiAnnually"
	SubscriptionBillingCycleBiAnnually string = "BiAnnually"

	// SubscriptionBillingCycleTwoYears captures enum value "TwoYears"
	SubscriptionBillingCycleTwoYears string = "TwoYears"

	// SubscriptionBillingCycleThreeYears captures enum value "ThreeYears"
	SubscriptionBillingCycleThreeYears string = "ThreeYears"

	// SubscriptionBillingCycleQuarterly captures enum value "Quarterly"
	SubscriptionBillingCycleQuarterly string = "Quarterly"
)

// prop value enum
func (m *Subscription) validateBillingCycleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subscriptionTypeBillingCyclePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subscription) validateBillingCycle(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingCycle) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingCycleEnum("BillingCycle", "body", m.BillingCycle); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateCreationDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreationDate) { // not required
		return nil
	}

	if err := validate.FormatOf("CreationDate", "body", "date-time", m.CreationDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateCustomerTenant(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerTenant) { // not required
		return nil
	}

	if m.CustomerTenant != nil {
		if err := m.CustomerTenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CustomerTenant")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateInvoiceProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceProfile) { // not required
		return nil
	}

	if m.InvoiceProfile != nil {
		if err := m.InvoiceProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InvoiceProfile")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

var subscriptionTypePriceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PurchasePrice","ListPrice","FixedPrice"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionTypePriceTypePropEnum = append(subscriptionTypePriceTypePropEnum, v)
	}
}

const (

	// SubscriptionPriceTypePurchasePrice captures enum value "PurchasePrice"
	SubscriptionPriceTypePurchasePrice string = "PurchasePrice"

	// SubscriptionPriceTypeListPrice captures enum value "ListPrice"
	SubscriptionPriceTypeListPrice string = "ListPrice"

	// SubscriptionPriceTypeFixedPrice captures enum value "FixedPrice"
	SubscriptionPriceTypeFixedPrice string = "FixedPrice"
)

// prop value enum
func (m *Subscription) validatePriceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subscriptionTypePriceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subscription) validatePriceType(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriceTypeEnum("PriceType", "body", m.PriceType); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Product")
			}
			return err
		}
	}

	return nil
}

var subscriptionTypeProvisionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Seat","Usage","OneTime","Crayon","AzureMarketplace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionTypeProvisionTypePropEnum = append(subscriptionTypeProvisionTypePropEnum, v)
	}
}

const (

	// SubscriptionProvisionTypeNone captures enum value "None"
	SubscriptionProvisionTypeNone string = "None"

	// SubscriptionProvisionTypeSeat captures enum value "Seat"
	SubscriptionProvisionTypeSeat string = "Seat"

	// SubscriptionProvisionTypeUsage captures enum value "Usage"
	SubscriptionProvisionTypeUsage string = "Usage"

	// SubscriptionProvisionTypeOneTime captures enum value "OneTime"
	SubscriptionProvisionTypeOneTime string = "OneTime"

	// SubscriptionProvisionTypeCrayon captures enum value "Crayon"
	SubscriptionProvisionTypeCrayon string = "Crayon"

	// SubscriptionProvisionTypeAzureMarketplace captures enum value "AzureMarketplace"
	SubscriptionProvisionTypeAzureMarketplace string = "AzureMarketplace"
)

// prop value enum
func (m *Subscription) validateProvisionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subscriptionTypeProvisionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subscription) validateProvisionType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProvisionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProvisionTypeEnum("ProvisionType", "body", m.ProvisionType); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validatePublisher(formats strfmt.Registry) error {

	if swag.IsZero(m.Publisher) { // not required
		return nil
	}

	if m.Publisher != nil {
		if err := m.Publisher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Publisher")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var subscriptionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Active","Suspended","Deleted","CustomerCancellation","Converted","Inactive","All"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionTypeStatusPropEnum = append(subscriptionTypeStatusPropEnum, v)
	}
}

const (

	// SubscriptionStatusNone captures enum value "None"
	SubscriptionStatusNone string = "None"

	// SubscriptionStatusActive captures enum value "Active"
	SubscriptionStatusActive string = "Active"

	// SubscriptionStatusSuspended captures enum value "Suspended"
	SubscriptionStatusSuspended string = "Suspended"

	// SubscriptionStatusDeleted captures enum value "Deleted"
	SubscriptionStatusDeleted string = "Deleted"

	// SubscriptionStatusCustomerCancellation captures enum value "CustomerCancellation"
	SubscriptionStatusCustomerCancellation string = "CustomerCancellation"

	// SubscriptionStatusConverted captures enum value "Converted"
	SubscriptionStatusConverted string = "Converted"

	// SubscriptionStatusInactive captures enum value "Inactive"
	SubscriptionStatusInactive string = "Inactive"

	// SubscriptionStatusAll captures enum value "All"
	SubscriptionStatusAll string = "All"
)

// prop value enum
func (m *Subscription) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subscriptionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Subscription) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Subscription) validateSubscriptionTags(formats strfmt.Registry) error {

	if swag.IsZero(m.SubscriptionTags) { // not required
		return nil
	}

	if m.SubscriptionTags != nil {
		if err := m.SubscriptionTags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SubscriptionTags")
			}
			return err
		}
	}

	return nil
}

func (m *Subscription) validateSubscriptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Subscriptions) { // not required
		return nil
	}

	for i := 0; i < len(m.Subscriptions); i++ {
		if swag.IsZero(m.Subscriptions[i]) { // not required
			continue
		}

		if m.Subscriptions[i] != nil {
			if err := m.Subscriptions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Subscriptions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Subscription) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Subscription) UnmarshalBinary(b []byte) error {
	var res Subscription
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
