// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User user
//
// swagger:model User
type User struct {

	// email
	Email string `json:"Email,omitempty"`

	// email confirmed
	EmailConfirmed bool `json:"EmailConfirmed,omitempty"`

	// first name
	FirstName string `json:"FirstName,omitempty"`

	// Id
	ID string `json:"Id,omitempty"`

	// last name
	LastName string `json:"LastName,omitempty"`

	// lockout enabled
	LockoutEnabled bool `json:"LockoutEnabled,omitempty"`

	// lockout end
	// Format: date-time
	LockoutEnd strfmt.DateTime `json:"LockoutEnd,omitempty"`

	// phone number
	PhoneNumber string `json:"PhoneNumber,omitempty"`

	// phone number confirmed
	PhoneNumberConfirmed bool `json:"PhoneNumberConfirmed,omitempty"`

	// tenant admin
	TenantAdmin bool `json:"TenantAdmin,omitempty"`

	// two factor enabled
	TwoFactorEnabled bool `json:"TwoFactorEnabled,omitempty"`

	// user name
	UserName string `json:"UserName,omitempty"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLockoutEnd(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateLockoutEnd(formats strfmt.Registry) error {

	if swag.IsZero(m.LockoutEnd) { // not required
		return nil
	}

	if err := validate.FormatOf("LockoutEnd", "body", "date-time", m.LockoutEnd.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
