// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgreementProduct agreement product
//
// swagger:model AgreementProduct
type AgreementProduct struct {

	// agreement
	Agreement *ObjectReference `json:"Agreement,omitempty"`

	// agreement type
	// Enum: [None LicenseAgreement OpenAgreement FrameAgreement SamAgreement ConsultingAgreement CloudSeatAgreement CloudUsageAgreement ReportingAgreement OtherAgreement Reserved1 Reserved2 Reserved3]
	AgreementType string `json:"AgreementType,omitempty"`

	// alternative sales price
	AlternativeSalesPrice *Price `json:"AlternativeSalesPrice,omitempty"`

	// maximum quantity
	MaximumQuantity int32 `json:"MaximumQuantity,omitempty"`

	// minimum quantity
	MinimumQuantity int32 `json:"MinimumQuantity,omitempty"`

	// month multiplier
	MonthMultiplier int32 `json:"MonthMultiplier,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// price calculation type
	// Enum: [None Default SelectPlus AdobeVip Mpsa]
	PriceCalculationType string `json:"PriceCalculationType,omitempty"`

	// price Id
	PriceID int32 `json:"PriceId,omitempty"`

	// price list name
	PriceListName string `json:"PriceListName,omitempty"`

	// product information
	ProductInformation *ProductInformation `json:"ProductInformation,omitempty"`

	// product type
	// Enum: [Product Bundle Service Internal]
	ProductType string `json:"ProductType,omitempty"`

	// product variant
	ProductVariant *ProductVariant `json:"ProductVariant,omitempty"`

	// recommended retail price
	RecommendedRetailPrice *Price `json:"RecommendedRetailPrice,omitempty"`

	// sales price
	SalesPrice *Price `json:"SalesPrice,omitempty"`

	// unique Id
	UniqueID string `json:"UniqueId,omitempty"`
}

// Validate validates this agreement product
func (m *AgreementProduct) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAgreementType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeSalesPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceCalculationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductVariant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecommendedRetailPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesPrice(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgreementProduct) validateAgreement(formats strfmt.Registry) error {

	if swag.IsZero(m.Agreement) { // not required
		return nil
	}

	if m.Agreement != nil {
		if err := m.Agreement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Agreement")
			}
			return err
		}
	}

	return nil
}

var agreementProductTypeAgreementTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","LicenseAgreement","OpenAgreement","FrameAgreement","SamAgreement","ConsultingAgreement","CloudSeatAgreement","CloudUsageAgreement","ReportingAgreement","OtherAgreement","Reserved1","Reserved2","Reserved3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementProductTypeAgreementTypePropEnum = append(agreementProductTypeAgreementTypePropEnum, v)
	}
}

const (

	// AgreementProductAgreementTypeNone captures enum value "None"
	AgreementProductAgreementTypeNone string = "None"

	// AgreementProductAgreementTypeLicenseAgreement captures enum value "LicenseAgreement"
	AgreementProductAgreementTypeLicenseAgreement string = "LicenseAgreement"

	// AgreementProductAgreementTypeOpenAgreement captures enum value "OpenAgreement"
	AgreementProductAgreementTypeOpenAgreement string = "OpenAgreement"

	// AgreementProductAgreementTypeFrameAgreement captures enum value "FrameAgreement"
	AgreementProductAgreementTypeFrameAgreement string = "FrameAgreement"

	// AgreementProductAgreementTypeSamAgreement captures enum value "SamAgreement"
	AgreementProductAgreementTypeSamAgreement string = "SamAgreement"

	// AgreementProductAgreementTypeConsultingAgreement captures enum value "ConsultingAgreement"
	AgreementProductAgreementTypeConsultingAgreement string = "ConsultingAgreement"

	// AgreementProductAgreementTypeCloudSeatAgreement captures enum value "CloudSeatAgreement"
	AgreementProductAgreementTypeCloudSeatAgreement string = "CloudSeatAgreement"

	// AgreementProductAgreementTypeCloudUsageAgreement captures enum value "CloudUsageAgreement"
	AgreementProductAgreementTypeCloudUsageAgreement string = "CloudUsageAgreement"

	// AgreementProductAgreementTypeReportingAgreement captures enum value "ReportingAgreement"
	AgreementProductAgreementTypeReportingAgreement string = "ReportingAgreement"

	// AgreementProductAgreementTypeOtherAgreement captures enum value "OtherAgreement"
	AgreementProductAgreementTypeOtherAgreement string = "OtherAgreement"

	// AgreementProductAgreementTypeReserved1 captures enum value "Reserved1"
	AgreementProductAgreementTypeReserved1 string = "Reserved1"

	// AgreementProductAgreementTypeReserved2 captures enum value "Reserved2"
	AgreementProductAgreementTypeReserved2 string = "Reserved2"

	// AgreementProductAgreementTypeReserved3 captures enum value "Reserved3"
	AgreementProductAgreementTypeReserved3 string = "Reserved3"
)

// prop value enum
func (m *AgreementProduct) validateAgreementTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementProductTypeAgreementTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgreementProduct) validateAgreementType(formats strfmt.Registry) error {

	if swag.IsZero(m.AgreementType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAgreementTypeEnum("AgreementType", "body", m.AgreementType); err != nil {
		return err
	}

	return nil
}

func (m *AgreementProduct) validateAlternativeSalesPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.AlternativeSalesPrice) { // not required
		return nil
	}

	if m.AlternativeSalesPrice != nil {
		if err := m.AlternativeSalesPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AlternativeSalesPrice")
			}
			return err
		}
	}

	return nil
}

var agreementProductTypePriceCalculationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Default","SelectPlus","AdobeVip","Mpsa"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementProductTypePriceCalculationTypePropEnum = append(agreementProductTypePriceCalculationTypePropEnum, v)
	}
}

const (

	// AgreementProductPriceCalculationTypeNone captures enum value "None"
	AgreementProductPriceCalculationTypeNone string = "None"

	// AgreementProductPriceCalculationTypeDefault captures enum value "Default"
	AgreementProductPriceCalculationTypeDefault string = "Default"

	// AgreementProductPriceCalculationTypeSelectPlus captures enum value "SelectPlus"
	AgreementProductPriceCalculationTypeSelectPlus string = "SelectPlus"

	// AgreementProductPriceCalculationTypeAdobeVip captures enum value "AdobeVip"
	AgreementProductPriceCalculationTypeAdobeVip string = "AdobeVip"

	// AgreementProductPriceCalculationTypeMpsa captures enum value "Mpsa"
	AgreementProductPriceCalculationTypeMpsa string = "Mpsa"
)

// prop value enum
func (m *AgreementProduct) validatePriceCalculationTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementProductTypePriceCalculationTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgreementProduct) validatePriceCalculationType(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceCalculationType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriceCalculationTypeEnum("PriceCalculationType", "body", m.PriceCalculationType); err != nil {
		return err
	}

	return nil
}

func (m *AgreementProduct) validateProductInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductInformation) { // not required
		return nil
	}

	if m.ProductInformation != nil {
		if err := m.ProductInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductInformation")
			}
			return err
		}
	}

	return nil
}

var agreementProductTypeProductTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Product","Bundle","Service","Internal"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementProductTypeProductTypePropEnum = append(agreementProductTypeProductTypePropEnum, v)
	}
}

const (

	// AgreementProductProductTypeProduct captures enum value "Product"
	AgreementProductProductTypeProduct string = "Product"

	// AgreementProductProductTypeBundle captures enum value "Bundle"
	AgreementProductProductTypeBundle string = "Bundle"

	// AgreementProductProductTypeService captures enum value "Service"
	AgreementProductProductTypeService string = "Service"

	// AgreementProductProductTypeInternal captures enum value "Internal"
	AgreementProductProductTypeInternal string = "Internal"
)

// prop value enum
func (m *AgreementProduct) validateProductTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementProductTypeProductTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgreementProduct) validateProductType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductType) { // not required
		return nil
	}

	// value enum
	if err := m.validateProductTypeEnum("ProductType", "body", m.ProductType); err != nil {
		return err
	}

	return nil
}

func (m *AgreementProduct) validateProductVariant(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductVariant) { // not required
		return nil
	}

	if m.ProductVariant != nil {
		if err := m.ProductVariant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductVariant")
			}
			return err
		}
	}

	return nil
}

func (m *AgreementProduct) validateRecommendedRetailPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.RecommendedRetailPrice) { // not required
		return nil
	}

	if m.RecommendedRetailPrice != nil {
		if err := m.RecommendedRetailPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("RecommendedRetailPrice")
			}
			return err
		}
	}

	return nil
}

func (m *AgreementProduct) validateSalesPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.SalesPrice) { // not required
		return nil
	}

	if m.SalesPrice != nil {
		if err := m.SalesPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SalesPrice")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgreementProduct) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgreementProduct) UnmarshalBinary(b []byte) error {
	var res AgreementProduct
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
