// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Client client
//
// swagger:model Client
type Client struct {

	// client Id
	ClientID string `json:"ClientId,omitempty"`

	// client name
	ClientName string `json:"ClientName,omitempty"`

	// client secrets
	ClientSecrets []*Secret `json:"ClientSecrets"`

	// client Uri
	ClientURI string `json:"ClientUri,omitempty"`

	// enabled
	Enabled bool `json:"Enabled,omitempty"`

	// flow
	// Enum: [AuthorizationCode Implicit ResourceOwner Other]
	Flow string `json:"Flow,omitempty"`

	// redirect uris
	RedirectUris []string `json:"RedirectUris"`

	// time stamp
	// Format: date-time
	TimeStamp strfmt.DateTime `json:"TimeStamp,omitempty"`
}

// Validate validates this client
func (m *Client) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientSecrets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Client) validateClientSecrets(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientSecrets) { // not required
		return nil
	}

	for i := 0; i < len(m.ClientSecrets); i++ {
		if swag.IsZero(m.ClientSecrets[i]) { // not required
			continue
		}

		if m.ClientSecrets[i] != nil {
			if err := m.ClientSecrets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ClientSecrets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var clientTypeFlowPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AuthorizationCode","Implicit","ResourceOwner","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clientTypeFlowPropEnum = append(clientTypeFlowPropEnum, v)
	}
}

const (

	// ClientFlowAuthorizationCode captures enum value "AuthorizationCode"
	ClientFlowAuthorizationCode string = "AuthorizationCode"

	// ClientFlowImplicit captures enum value "Implicit"
	ClientFlowImplicit string = "Implicit"

	// ClientFlowResourceOwner captures enum value "ResourceOwner"
	ClientFlowResourceOwner string = "ResourceOwner"

	// ClientFlowOther captures enum value "Other"
	ClientFlowOther string = "Other"
)

// prop value enum
func (m *Client) validateFlowEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clientTypeFlowPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Client) validateFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.Flow) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlowEnum("Flow", "body", m.Flow); err != nil {
		return err
	}

	return nil
}

func (m *Client) validateTimeStamp(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeStamp) { // not required
		return nil
	}

	if err := validate.FormatOf("TimeStamp", "body", "date-time", m.TimeStamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Client) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Client) UnmarshalBinary(b []byte) error {
	var res Client
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
