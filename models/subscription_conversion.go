// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionConversion subscription conversion
//
// swagger:model SubscriptionConversion
type SubscriptionConversion struct {

	// billing cycle
	// Enum: [Unknown Monthly Annual None OneTime BiAnnually TwoYears ThreeYears Quarterly]
	BillingCycle string `json:"BillingCycle,omitempty"`

	// offer Id
	OfferID string `json:"OfferId,omitempty"`

	// order Id
	OrderID string `json:"OrderId,omitempty"`

	// product name
	ProductName string `json:"ProductName,omitempty"`

	// quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// target offer Id
	TargetOfferID string `json:"TargetOfferId,omitempty"`
}

// Validate validates this subscription conversion
func (m *SubscriptionConversion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBillingCycle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var subscriptionConversionTypeBillingCyclePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Monthly","Annual","None","OneTime","BiAnnually","TwoYears","ThreeYears","Quarterly"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subscriptionConversionTypeBillingCyclePropEnum = append(subscriptionConversionTypeBillingCyclePropEnum, v)
	}
}

const (

	// SubscriptionConversionBillingCycleUnknown captures enum value "Unknown"
	SubscriptionConversionBillingCycleUnknown string = "Unknown"

	// SubscriptionConversionBillingCycleMonthly captures enum value "Monthly"
	SubscriptionConversionBillingCycleMonthly string = "Monthly"

	// SubscriptionConversionBillingCycleAnnual captures enum value "Annual"
	SubscriptionConversionBillingCycleAnnual string = "Annual"

	// SubscriptionConversionBillingCycleNone captures enum value "None"
	SubscriptionConversionBillingCycleNone string = "None"

	// SubscriptionConversionBillingCycleOneTime captures enum value "OneTime"
	SubscriptionConversionBillingCycleOneTime string = "OneTime"

	// SubscriptionConversionBillingCycleBiAnnually captures enum value "BiAnnually"
	SubscriptionConversionBillingCycleBiAnnually string = "BiAnnually"

	// SubscriptionConversionBillingCycleTwoYears captures enum value "TwoYears"
	SubscriptionConversionBillingCycleTwoYears string = "TwoYears"

	// SubscriptionConversionBillingCycleThreeYears captures enum value "ThreeYears"
	SubscriptionConversionBillingCycleThreeYears string = "ThreeYears"

	// SubscriptionConversionBillingCycleQuarterly captures enum value "Quarterly"
	SubscriptionConversionBillingCycleQuarterly string = "Quarterly"
)

// prop value enum
func (m *SubscriptionConversion) validateBillingCycleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, subscriptionConversionTypeBillingCyclePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SubscriptionConversion) validateBillingCycle(formats strfmt.Registry) error {

	if swag.IsZero(m.BillingCycle) { // not required
		return nil
	}

	// value enum
	if err := m.validateBillingCycleEnum("BillingCycle", "body", m.BillingCycle); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionConversion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionConversion) UnmarshalBinary(b []byte) error {
	var res SubscriptionConversion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
