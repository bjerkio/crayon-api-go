// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductVariant product variant
//
// swagger:model ProductVariant
type ProductVariant struct {

	// add date
	// Format: date-time
	AddDate strfmt.DateTime `json:"AddDate,omitempty"`

	// attributes
	Attributes map[string]interface{} `json:"Attributes,omitempty"`

	// available billing cycle ids
	AvailableBillingCycleIds []int32 `json:"AvailableBillingCycleIds"`

	// default billing cycle Id
	DefaultBillingCycleID int32 `json:"DefaultBillingCycleId,omitempty"`

	// delete date
	// Format: date-time
	DeleteDate strfmt.DateTime `json:"DeleteDate,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// is trial
	IsTrial bool `json:"IsTrial,omitempty"`

	// language
	Language *ObjectReference `json:"Language,omitempty"`

	// level
	Level *ObjectReference `json:"Level,omitempty"`

	// license agreement type
	LicenseAgreementType *ObjectReference `json:"LicenseAgreementType,omitempty"`

	// license type
	LicenseType *ObjectReference `json:"LicenseType,omitempty"`

	// minimum commitment
	MinimumCommitment *MinimumCommitmentLight `json:"MinimumCommitment,omitempty"`

	// offering
	Offering *ObjectReference `json:"Offering,omitempty"`

	// operating system
	OperatingSystem *ObjectReference `json:"OperatingSystem,omitempty"`

	// part number
	PartNumber string `json:"PartNumber,omitempty"`

	// pool
	Pool *ObjectReference `json:"Pool,omitempty"`

	// product
	Product *ProductReference `json:"Product,omitempty"`

	// product category
	ProductCategory string `json:"ProductCategory,omitempty"`

	// product family
	ProductFamily *ObjectReference `json:"ProductFamily,omitempty"`

	// product name
	ProductName string `json:"ProductName,omitempty"`

	// product type
	ProductType *ObjectReference `json:"ProductType,omitempty"`

	// program
	Program *ObjectReference `json:"Program,omitempty"`

	// publisher
	Publisher *ObjectReference `json:"Publisher,omitempty"`

	// purchase unit
	PurchaseUnit string `json:"PurchaseUnit,omitempty"`

	// region
	Region string `json:"Region,omitempty"`

	// unit count
	UnitCount int32 `json:"UnitCount,omitempty"`

	// version
	Version string `json:"Version,omitempty"`
}

// Validate validates this product variant
func (m *ProductVariant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDeleteDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseAgreementType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinimumCommitment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffering(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductFamily(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublisher(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductVariant) validateAddDate(formats strfmt.Registry) error {

	if swag.IsZero(m.AddDate) { // not required
		return nil
	}

	if err := validate.FormatOf("AddDate", "body", "date-time", m.AddDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductVariant) validateDeleteDate(formats strfmt.Registry) error {

	if swag.IsZero(m.DeleteDate) { // not required
		return nil
	}

	if err := validate.FormatOf("DeleteDate", "body", "date-time", m.DeleteDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *ProductVariant) validateLanguage(formats strfmt.Registry) error {

	if swag.IsZero(m.Language) { // not required
		return nil
	}

	if m.Language != nil {
		if err := m.Language.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Language")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	if m.Level != nil {
		if err := m.Level.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Level")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateLicenseAgreementType(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseAgreementType) { // not required
		return nil
	}

	if m.LicenseAgreementType != nil {
		if err := m.LicenseAgreementType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LicenseAgreementType")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateLicenseType(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseType) { // not required
		return nil
	}

	if m.LicenseType != nil {
		if err := m.LicenseType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("LicenseType")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateMinimumCommitment(formats strfmt.Registry) error {

	if swag.IsZero(m.MinimumCommitment) { // not required
		return nil
	}

	if m.MinimumCommitment != nil {
		if err := m.MinimumCommitment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("MinimumCommitment")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateOffering(formats strfmt.Registry) error {

	if swag.IsZero(m.Offering) { // not required
		return nil
	}

	if m.Offering != nil {
		if err := m.Offering.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Offering")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateOperatingSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatingSystem) { // not required
		return nil
	}

	if m.OperatingSystem != nil {
		if err := m.OperatingSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("OperatingSystem")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validatePool(formats strfmt.Registry) error {

	if swag.IsZero(m.Pool) { // not required
		return nil
	}

	if m.Pool != nil {
		if err := m.Pool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Pool")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Product")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateProductFamily(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductFamily) { // not required
		return nil
	}

	if m.ProductFamily != nil {
		if err := m.ProductFamily.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductFamily")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateProductType(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductType) { // not required
		return nil
	}

	if m.ProductType != nil {
		if err := m.ProductType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductType")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validateProgram(formats strfmt.Registry) error {

	if swag.IsZero(m.Program) { // not required
		return nil
	}

	if m.Program != nil {
		if err := m.Program.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Program")
			}
			return err
		}
	}

	return nil
}

func (m *ProductVariant) validatePublisher(formats strfmt.Registry) error {

	if swag.IsZero(m.Publisher) { // not required
		return nil
	}

	if m.Publisher != nil {
		if err := m.Publisher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Publisher")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductVariant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductVariant) UnmarshalBinary(b []byte) error {
	var res ProductVariant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
