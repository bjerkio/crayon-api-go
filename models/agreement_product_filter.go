// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AgreementProductFilter agreement product filter
//
// swagger:model AgreementProductFilter
type AgreementProductFilter struct {

	// agreement Id
	AgreementID int32 `json:"AgreementId,omitempty"`

	// agreement ids
	AgreementIds []int32 `json:"AgreementIds"`

	// agreement type ids
	AgreementTypeIds []string `json:"AgreementTypeIds"`

	// customer tenant Id
	CustomerTenantID int32 `json:"CustomerTenantId,omitempty"`

	// exclude
	Exclude *AgreementProductsSubFilter `json:"Exclude,omitempty"`

	// include
	Include *AgreementProductsSubFilter `json:"Include,omitempty"`

	// include product information
	IncludeProductInformation bool `json:"IncludeProductInformation,omitempty"`

	// is trial
	IsTrial bool `json:"IsTrial,omitempty"`

	// organization Id
	OrganizationID int32 `json:"OrganizationId,omitempty"`

	// page
	Page int32 `json:"Page,omitempty"`

	// page size
	PageSize int32 `json:"PageSize,omitempty"`

	// price list Id
	PriceListID int32 `json:"PriceListId,omitempty"`

	// search
	Search string `json:"Search,omitempty"`

	// search date
	// Format: date-time
	SearchDate strfmt.DateTime `json:"SearchDate,omitempty"`

	// sort key
	SortKey string `json:"SortKey,omitempty"`

	// sort order
	// Enum: [Ascending Descending]
	SortOrder string `json:"SortOrder,omitempty"`
}

// Validate validates this agreement product filter
func (m *AgreementProductFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreementTypeIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExclude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInclude(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSortOrder(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agreementProductFilterAgreementTypeIdsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","LicenseAgreement","OpenAgreement","FrameAgreement","SamAgreement","ConsultingAgreement","CloudSeatAgreement","CloudUsageAgreement","ReportingAgreement","OtherAgreement","Reserved1","Reserved2","Reserved3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementProductFilterAgreementTypeIdsItemsEnum = append(agreementProductFilterAgreementTypeIdsItemsEnum, v)
	}
}

func (m *AgreementProductFilter) validateAgreementTypeIdsItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementProductFilterAgreementTypeIdsItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgreementProductFilter) validateAgreementTypeIds(formats strfmt.Registry) error {

	if swag.IsZero(m.AgreementTypeIds) { // not required
		return nil
	}

	for i := 0; i < len(m.AgreementTypeIds); i++ {

		// value enum
		if err := m.validateAgreementTypeIdsItemsEnum("AgreementTypeIds"+"."+strconv.Itoa(i), "body", m.AgreementTypeIds[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *AgreementProductFilter) validateExclude(formats strfmt.Registry) error {

	if swag.IsZero(m.Exclude) { // not required
		return nil
	}

	if m.Exclude != nil {
		if err := m.Exclude.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Exclude")
			}
			return err
		}
	}

	return nil
}

func (m *AgreementProductFilter) validateInclude(formats strfmt.Registry) error {

	if swag.IsZero(m.Include) { // not required
		return nil
	}

	if m.Include != nil {
		if err := m.Include.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Include")
			}
			return err
		}
	}

	return nil
}

func (m *AgreementProductFilter) validateSearchDate(formats strfmt.Registry) error {

	if swag.IsZero(m.SearchDate) { // not required
		return nil
	}

	if err := validate.FormatOf("SearchDate", "body", "date-time", m.SearchDate.String(), formats); err != nil {
		return err
	}

	return nil
}

var agreementProductFilterTypeSortOrderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Ascending","Descending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementProductFilterTypeSortOrderPropEnum = append(agreementProductFilterTypeSortOrderPropEnum, v)
	}
}

const (

	// AgreementProductFilterSortOrderAscending captures enum value "Ascending"
	AgreementProductFilterSortOrderAscending string = "Ascending"

	// AgreementProductFilterSortOrderDescending captures enum value "Descending"
	AgreementProductFilterSortOrderDescending string = "Descending"
)

// prop value enum
func (m *AgreementProductFilter) validateSortOrderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementProductFilterTypeSortOrderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AgreementProductFilter) validateSortOrder(formats strfmt.Registry) error {

	if swag.IsZero(m.SortOrder) { // not required
		return nil
	}

	// value enum
	if err := m.validateSortOrderEnum("SortOrder", "body", m.SortOrder); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgreementProductFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgreementProductFilter) UnmarshalBinary(b []byte) error {
	var res AgreementProductFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
