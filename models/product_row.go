// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProductRow product row
//
// swagger:model ProductRow
type ProductRow struct {

	// agreement
	Agreement *AgreementIdentityReference `json:"Agreement,omitempty"`

	// alternative sales unit price
	AlternativeSalesUnitPrice *Price `json:"AlternativeSalesUnitPrice,omitempty"`

	// comment
	Comment string `json:"Comment,omitempty"`

	// customer reference
	CustomerReference string `json:"CustomerReference,omitempty"`

	// grouping
	Grouping *Grouping `json:"Grouping,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// invoice profile
	InvoiceProfile *ObjectReference `json:"InvoiceProfile,omitempty"`

	// invoice reference
	InvoiceReference string `json:"InvoiceReference,omitempty"`

	// issues
	Issues []*ProductContainerIssue `json:"Issues"`

	// level value
	LevelValue float64 `json:"LevelValue,omitempty"`

	// offering type
	OfferingType string `json:"OfferingType,omitempty"`

	// price calculation
	// Enum: [None Default SelectPlus AdobeVip Mpsa]
	PriceCalculation string `json:"PriceCalculation,omitempty"`

	// product
	Product *ProductReference `json:"Product,omitempty"`

	// product container Id
	ProductContainerID int32 `json:"ProductContainerId,omitempty"`

	// product variant
	ProductVariant *ObjectReference `json:"ProductVariant,omitempty"`

	// program
	Program *ObjectReference `json:"Program,omitempty"`

	// publisher
	Publisher *ObjectReference `json:"Publisher,omitempty"`

	// quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// sales price per alternative unit
	SalesPricePerAlternativeUnit float64 `json:"SalesPricePerAlternativeUnit,omitempty"`

	// sales unit price
	SalesUnitPrice *Price `json:"SalesUnitPrice,omitempty"`

	// usage country code
	UsageCountryCode string `json:"UsageCountryCode,omitempty"`

	// user
	User *ProductRowUser `json:"User,omitempty"`
}

// Validate validates this product row
func (m *ProductRow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlternativeSalesUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrouping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriceCalculation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProduct(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductVariant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublisher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSalesUnitPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductRow) validateAgreement(formats strfmt.Registry) error {

	if swag.IsZero(m.Agreement) { // not required
		return nil
	}

	if m.Agreement != nil {
		if err := m.Agreement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Agreement")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRow) validateAlternativeSalesUnitPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.AlternativeSalesUnitPrice) { // not required
		return nil
	}

	if m.AlternativeSalesUnitPrice != nil {
		if err := m.AlternativeSalesUnitPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("AlternativeSalesUnitPrice")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRow) validateGrouping(formats strfmt.Registry) error {

	if swag.IsZero(m.Grouping) { // not required
		return nil
	}

	if m.Grouping != nil {
		if err := m.Grouping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Grouping")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRow) validateInvoiceProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceProfile) { // not required
		return nil
	}

	if m.InvoiceProfile != nil {
		if err := m.InvoiceProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InvoiceProfile")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRow) validateIssues(formats strfmt.Registry) error {

	if swag.IsZero(m.Issues) { // not required
		return nil
	}

	for i := 0; i < len(m.Issues); i++ {
		if swag.IsZero(m.Issues[i]) { // not required
			continue
		}

		if m.Issues[i] != nil {
			if err := m.Issues[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Issues" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var productRowTypePriceCalculationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Default","SelectPlus","AdobeVip","Mpsa"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		productRowTypePriceCalculationPropEnum = append(productRowTypePriceCalculationPropEnum, v)
	}
}

const (

	// ProductRowPriceCalculationNone captures enum value "None"
	ProductRowPriceCalculationNone string = "None"

	// ProductRowPriceCalculationDefault captures enum value "Default"
	ProductRowPriceCalculationDefault string = "Default"

	// ProductRowPriceCalculationSelectPlus captures enum value "SelectPlus"
	ProductRowPriceCalculationSelectPlus string = "SelectPlus"

	// ProductRowPriceCalculationAdobeVip captures enum value "AdobeVip"
	ProductRowPriceCalculationAdobeVip string = "AdobeVip"

	// ProductRowPriceCalculationMpsa captures enum value "Mpsa"
	ProductRowPriceCalculationMpsa string = "Mpsa"
)

// prop value enum
func (m *ProductRow) validatePriceCalculationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, productRowTypePriceCalculationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProductRow) validatePriceCalculation(formats strfmt.Registry) error {

	if swag.IsZero(m.PriceCalculation) { // not required
		return nil
	}

	// value enum
	if err := m.validatePriceCalculationEnum("PriceCalculation", "body", m.PriceCalculation); err != nil {
		return err
	}

	return nil
}

func (m *ProductRow) validateProduct(formats strfmt.Registry) error {

	if swag.IsZero(m.Product) { // not required
		return nil
	}

	if m.Product != nil {
		if err := m.Product.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Product")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRow) validateProductVariant(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductVariant) { // not required
		return nil
	}

	if m.ProductVariant != nil {
		if err := m.ProductVariant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductVariant")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRow) validateProgram(formats strfmt.Registry) error {

	if swag.IsZero(m.Program) { // not required
		return nil
	}

	if m.Program != nil {
		if err := m.Program.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Program")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRow) validatePublisher(formats strfmt.Registry) error {

	if swag.IsZero(m.Publisher) { // not required
		return nil
	}

	if m.Publisher != nil {
		if err := m.Publisher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Publisher")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRow) validateSalesUnitPrice(formats strfmt.Registry) error {

	if swag.IsZero(m.SalesUnitPrice) { // not required
		return nil
	}

	if m.SalesUnitPrice != nil {
		if err := m.SalesUnitPrice.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("SalesUnitPrice")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRow) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductRow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductRow) UnmarshalBinary(b []byte) error {
	var res ProductRow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
