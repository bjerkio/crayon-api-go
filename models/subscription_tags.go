// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubscriptionTags subscription tags
//
// swagger:model SubscriptionTags
type SubscriptionTags struct {

	// cost center
	CostCenter string `json:"CostCenter,omitempty"`

	// created date
	// Format: date-time
	CreatedDate strfmt.DateTime `json:"CreatedDate,omitempty"`

	// custom
	Custom string `json:"Custom,omitempty"`

	// department
	Department string `json:"Department,omitempty"`

	// modified date
	// Format: date-time
	ModifiedDate strfmt.DateTime `json:"ModifiedDate,omitempty"`

	// owner
	Owner string `json:"Owner,omitempty"`

	// project
	Project string `json:"Project,omitempty"`

	// subscription Id
	SubscriptionID int32 `json:"SubscriptionId,omitempty"`
}

// Validate validates this subscription tags
func (m *SubscriptionTags) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateModifiedDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubscriptionTags) validateCreatedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("CreatedDate", "body", "date-time", m.CreatedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SubscriptionTags) validateModifiedDate(formats strfmt.Registry) error {

	if swag.IsZero(m.ModifiedDate) { // not required
		return nil
	}

	if err := validate.FormatOf("ModifiedDate", "body", "date-time", m.ModifiedDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubscriptionTags) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubscriptionTags) UnmarshalBinary(b []byte) error {
	var res SubscriptionTags
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
