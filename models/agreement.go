// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Agreement agreement
//
// swagger:model Agreement
type Agreement struct {

	// agreement type
	// Enum: [None LicenseAgreement OpenAgreement FrameAgreement SamAgreement ConsultingAgreement CloudSeatAgreement CloudUsageAgreement ReportingAgreement OtherAgreement Reserved1 Reserved2 Reserved3]
	AgreementType string `json:"AgreementType,omitempty"`

	// commitment level
	CommitmentLevel float64 `json:"CommitmentLevel,omitempty"`

	// customer number
	CustomerNumber string `json:"CustomerNumber,omitempty"`

	// disabled
	Disabled bool `json:"Disabled,omitempty"`

	// end date
	// Format: date-time
	EndDate strfmt.DateTime `json:"EndDate,omitempty"`

	// has terms
	HasTerms bool `json:"HasTerms,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// master agreement
	MasterAgreement string `json:"MasterAgreement,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// number
	Number string `json:"Number,omitempty"`

	// organization
	Organization *ObjectReference `json:"Organization,omitempty"`

	// parent agreement Id
	ParentAgreementID int32 `json:"ParentAgreementId,omitempty"`

	// program
	Program *ObjectReference `json:"Program,omitempty"`

	// publisher
	Publisher *ObjectReference `json:"Publisher,omitempty"`

	// sales price currency code
	SalesPriceCurrencyCode string `json:"SalesPriceCurrencyCode,omitempty"`

	// start date
	// Format: date-time
	StartDate strfmt.DateTime `json:"StartDate,omitempty"`
}

// Validate validates this agreement
func (m *Agreement) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreementType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublisher(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartDate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var agreementTypeAgreementTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","LicenseAgreement","OpenAgreement","FrameAgreement","SamAgreement","ConsultingAgreement","CloudSeatAgreement","CloudUsageAgreement","ReportingAgreement","OtherAgreement","Reserved1","Reserved2","Reserved3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		agreementTypeAgreementTypePropEnum = append(agreementTypeAgreementTypePropEnum, v)
	}
}

const (

	// AgreementAgreementTypeNone captures enum value "None"
	AgreementAgreementTypeNone string = "None"

	// AgreementAgreementTypeLicenseAgreement captures enum value "LicenseAgreement"
	AgreementAgreementTypeLicenseAgreement string = "LicenseAgreement"

	// AgreementAgreementTypeOpenAgreement captures enum value "OpenAgreement"
	AgreementAgreementTypeOpenAgreement string = "OpenAgreement"

	// AgreementAgreementTypeFrameAgreement captures enum value "FrameAgreement"
	AgreementAgreementTypeFrameAgreement string = "FrameAgreement"

	// AgreementAgreementTypeSamAgreement captures enum value "SamAgreement"
	AgreementAgreementTypeSamAgreement string = "SamAgreement"

	// AgreementAgreementTypeConsultingAgreement captures enum value "ConsultingAgreement"
	AgreementAgreementTypeConsultingAgreement string = "ConsultingAgreement"

	// AgreementAgreementTypeCloudSeatAgreement captures enum value "CloudSeatAgreement"
	AgreementAgreementTypeCloudSeatAgreement string = "CloudSeatAgreement"

	// AgreementAgreementTypeCloudUsageAgreement captures enum value "CloudUsageAgreement"
	AgreementAgreementTypeCloudUsageAgreement string = "CloudUsageAgreement"

	// AgreementAgreementTypeReportingAgreement captures enum value "ReportingAgreement"
	AgreementAgreementTypeReportingAgreement string = "ReportingAgreement"

	// AgreementAgreementTypeOtherAgreement captures enum value "OtherAgreement"
	AgreementAgreementTypeOtherAgreement string = "OtherAgreement"

	// AgreementAgreementTypeReserved1 captures enum value "Reserved1"
	AgreementAgreementTypeReserved1 string = "Reserved1"

	// AgreementAgreementTypeReserved2 captures enum value "Reserved2"
	AgreementAgreementTypeReserved2 string = "Reserved2"

	// AgreementAgreementTypeReserved3 captures enum value "Reserved3"
	AgreementAgreementTypeReserved3 string = "Reserved3"
)

// prop value enum
func (m *Agreement) validateAgreementTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, agreementTypeAgreementTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Agreement) validateAgreementType(formats strfmt.Registry) error {

	if swag.IsZero(m.AgreementType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAgreementTypeEnum("AgreementType", "body", m.AgreementType); err != nil {
		return err
	}

	return nil
}

func (m *Agreement) validateEndDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EndDate) { // not required
		return nil
	}

	if err := validate.FormatOf("EndDate", "body", "date-time", m.EndDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Agreement) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *Agreement) validateProgram(formats strfmt.Registry) error {

	if swag.IsZero(m.Program) { // not required
		return nil
	}

	if m.Program != nil {
		if err := m.Program.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Program")
			}
			return err
		}
	}

	return nil
}

func (m *Agreement) validatePublisher(formats strfmt.Registry) error {

	if swag.IsZero(m.Publisher) { // not required
		return nil
	}

	if m.Publisher != nil {
		if err := m.Publisher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Publisher")
			}
			return err
		}
	}

	return nil
}

func (m *Agreement) validateStartDate(formats strfmt.Registry) error {

	if swag.IsZero(m.StartDate) { // not required
		return nil
	}

	if err := validate.FormatOf("StartDate", "body", "date-time", m.StartDate.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Agreement) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Agreement) UnmarshalBinary(b []byte) error {
	var res Agreement
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
