// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzurePlan azure plan
//
// swagger:model AzurePlan
type AzurePlan struct {

	// customer tenant
	CustomerTenant *CustomerTenantReference `json:"CustomerTenant,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// organization
	Organization *ObjectReference `json:"Organization,omitempty"`

	// publisher subscription Id
	PublisherSubscriptionID string `json:"PublisherSubscriptionId,omitempty"`

	// registered for reserved instance
	RegisteredForReservedInstance bool `json:"RegisteredForReservedInstance,omitempty"`

	// status
	// Enum: [None Active Suspended Deleted CustomerCancellation Converted Inactive All]
	Status string `json:"Status,omitempty"`
}

// Validate validates this azure plan
func (m *AzurePlan) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomerTenant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzurePlan) validateCustomerTenant(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerTenant) { // not required
		return nil
	}

	if m.CustomerTenant != nil {
		if err := m.CustomerTenant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("CustomerTenant")
			}
			return err
		}
	}

	return nil
}

func (m *AzurePlan) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

var azurePlanTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Active","Suspended","Deleted","CustomerCancellation","Converted","Inactive","All"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		azurePlanTypeStatusPropEnum = append(azurePlanTypeStatusPropEnum, v)
	}
}

const (

	// AzurePlanStatusNone captures enum value "None"
	AzurePlanStatusNone string = "None"

	// AzurePlanStatusActive captures enum value "Active"
	AzurePlanStatusActive string = "Active"

	// AzurePlanStatusSuspended captures enum value "Suspended"
	AzurePlanStatusSuspended string = "Suspended"

	// AzurePlanStatusDeleted captures enum value "Deleted"
	AzurePlanStatusDeleted string = "Deleted"

	// AzurePlanStatusCustomerCancellation captures enum value "CustomerCancellation"
	AzurePlanStatusCustomerCancellation string = "CustomerCancellation"

	// AzurePlanStatusConverted captures enum value "Converted"
	AzurePlanStatusConverted string = "Converted"

	// AzurePlanStatusInactive captures enum value "Inactive"
	AzurePlanStatusInactive string = "Inactive"

	// AzurePlanStatusAll captures enum value "All"
	AzurePlanStatusAll string = "All"
)

// prop value enum
func (m *AzurePlan) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, azurePlanTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AzurePlan) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("Status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzurePlan) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzurePlan) UnmarshalBinary(b []byte) error {
	var res AzurePlan
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
