// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// AgreementProductCollection agreement product collection
//
// swagger:model AgreementProductCollection
type AgreementProductCollection struct {

	// agreements
	Agreements []*ObjectReference `json:"Agreements"`

	// filter
	Filter *AgreementProductFilter `json:"Filter,omitempty"`

	// items
	Items []*AgreementProduct `json:"Items"`

	// languages
	Languages []*AggregationItem `json:"Languages"`

	// levels
	Levels []*AggregationItem `json:"Levels"`

	// license agreement types
	LicenseAgreementTypes []*AggregationItem `json:"LicenseAgreementTypes"`

	// license types
	LicenseTypes []*AggregationItem `json:"LicenseTypes"`

	// offerings
	Offerings []*AggregationItem `json:"Offerings"`

	// operating systems
	OperatingSystems []*AggregationItem `json:"OperatingSystems"`

	// pools
	Pools []*AggregationItem `json:"Pools"`

	// product categories
	ProductCategories []*AggregationItem `json:"ProductCategories"`

	// product families
	ProductFamilies []*AggregationItem `json:"ProductFamilies"`

	// product types
	ProductTypes []*AggregationItem `json:"ProductTypes"`

	// programs
	Programs []*AggregationItem `json:"Programs"`

	// publishers
	Publishers []*PublisherAggregationItem `json:"Publishers"`

	// purchase periods
	PurchasePeriods []*AggregationItem `json:"PurchasePeriods"`

	// purchase units
	PurchaseUnits []*AggregationItem `json:"PurchaseUnits"`

	// regions
	Regions []*AggregationItem `json:"Regions"`

	// total hits
	TotalHits int64 `json:"TotalHits,omitempty"`

	// versions
	Versions []*AggregationItem `json:"Versions"`
}

// Validate validates this agreement product collection
func (m *AgreementProductCollection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFilter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLanguages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLevels(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseAgreementTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLicenseTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOfferings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePools(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductCategories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductFamilies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductTypes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrograms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublishers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchasePeriods(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePurchaseUnits(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AgreementProductCollection) validateAgreements(formats strfmt.Registry) error {

	if swag.IsZero(m.Agreements) { // not required
		return nil
	}

	for i := 0; i < len(m.Agreements); i++ {
		if swag.IsZero(m.Agreements[i]) { // not required
			continue
		}

		if m.Agreements[i] != nil {
			if err := m.Agreements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Agreements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateFilter(formats strfmt.Registry) error {

	if swag.IsZero(m.Filter) { // not required
		return nil
	}

	if m.Filter != nil {
		if err := m.Filter.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Filter")
			}
			return err
		}
	}

	return nil
}

func (m *AgreementProductCollection) validateItems(formats strfmt.Registry) error {

	if swag.IsZero(m.Items) { // not required
		return nil
	}

	for i := 0; i < len(m.Items); i++ {
		if swag.IsZero(m.Items[i]) { // not required
			continue
		}

		if m.Items[i] != nil {
			if err := m.Items[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Items" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateLanguages(formats strfmt.Registry) error {

	if swag.IsZero(m.Languages) { // not required
		return nil
	}

	for i := 0; i < len(m.Languages); i++ {
		if swag.IsZero(m.Languages[i]) { // not required
			continue
		}

		if m.Languages[i] != nil {
			if err := m.Languages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Languages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateLevels(formats strfmt.Registry) error {

	if swag.IsZero(m.Levels) { // not required
		return nil
	}

	for i := 0; i < len(m.Levels); i++ {
		if swag.IsZero(m.Levels[i]) { // not required
			continue
		}

		if m.Levels[i] != nil {
			if err := m.Levels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Levels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateLicenseAgreementTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseAgreementTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseAgreementTypes); i++ {
		if swag.IsZero(m.LicenseAgreementTypes[i]) { // not required
			continue
		}

		if m.LicenseAgreementTypes[i] != nil {
			if err := m.LicenseAgreementTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LicenseAgreementTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateLicenseTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.LicenseTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.LicenseTypes); i++ {
		if swag.IsZero(m.LicenseTypes[i]) { // not required
			continue
		}

		if m.LicenseTypes[i] != nil {
			if err := m.LicenseTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("LicenseTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateOfferings(formats strfmt.Registry) error {

	if swag.IsZero(m.Offerings) { // not required
		return nil
	}

	for i := 0; i < len(m.Offerings); i++ {
		if swag.IsZero(m.Offerings[i]) { // not required
			continue
		}

		if m.Offerings[i] != nil {
			if err := m.Offerings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Offerings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateOperatingSystems(formats strfmt.Registry) error {

	if swag.IsZero(m.OperatingSystems) { // not required
		return nil
	}

	for i := 0; i < len(m.OperatingSystems); i++ {
		if swag.IsZero(m.OperatingSystems[i]) { // not required
			continue
		}

		if m.OperatingSystems[i] != nil {
			if err := m.OperatingSystems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("OperatingSystems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validatePools(formats strfmt.Registry) error {

	if swag.IsZero(m.Pools) { // not required
		return nil
	}

	for i := 0; i < len(m.Pools); i++ {
		if swag.IsZero(m.Pools[i]) { // not required
			continue
		}

		if m.Pools[i] != nil {
			if err := m.Pools[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Pools" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateProductCategories(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductCategories) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductCategories); i++ {
		if swag.IsZero(m.ProductCategories[i]) { // not required
			continue
		}

		if m.ProductCategories[i] != nil {
			if err := m.ProductCategories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProductCategories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateProductFamilies(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductFamilies) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductFamilies); i++ {
		if swag.IsZero(m.ProductFamilies[i]) { // not required
			continue
		}

		if m.ProductFamilies[i] != nil {
			if err := m.ProductFamilies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProductFamilies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateProductTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.ProductTypes); i++ {
		if swag.IsZero(m.ProductTypes[i]) { // not required
			continue
		}

		if m.ProductTypes[i] != nil {
			if err := m.ProductTypes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ProductTypes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validatePrograms(formats strfmt.Registry) error {

	if swag.IsZero(m.Programs) { // not required
		return nil
	}

	for i := 0; i < len(m.Programs); i++ {
		if swag.IsZero(m.Programs[i]) { // not required
			continue
		}

		if m.Programs[i] != nil {
			if err := m.Programs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Programs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validatePublishers(formats strfmt.Registry) error {

	if swag.IsZero(m.Publishers) { // not required
		return nil
	}

	for i := 0; i < len(m.Publishers); i++ {
		if swag.IsZero(m.Publishers[i]) { // not required
			continue
		}

		if m.Publishers[i] != nil {
			if err := m.Publishers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Publishers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validatePurchasePeriods(formats strfmt.Registry) error {

	if swag.IsZero(m.PurchasePeriods) { // not required
		return nil
	}

	for i := 0; i < len(m.PurchasePeriods); i++ {
		if swag.IsZero(m.PurchasePeriods[i]) { // not required
			continue
		}

		if m.PurchasePeriods[i] != nil {
			if err := m.PurchasePeriods[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PurchasePeriods" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validatePurchaseUnits(formats strfmt.Registry) error {

	if swag.IsZero(m.PurchaseUnits) { // not required
		return nil
	}

	for i := 0; i < len(m.PurchaseUnits); i++ {
		if swag.IsZero(m.PurchaseUnits[i]) { // not required
			continue
		}

		if m.PurchaseUnits[i] != nil {
			if err := m.PurchaseUnits[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("PurchaseUnits" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateRegions(formats strfmt.Registry) error {

	if swag.IsZero(m.Regions) { // not required
		return nil
	}

	for i := 0; i < len(m.Regions); i++ {
		if swag.IsZero(m.Regions[i]) { // not required
			continue
		}

		if m.Regions[i] != nil {
			if err := m.Regions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Regions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AgreementProductCollection) validateVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.Versions) { // not required
		return nil
	}

	for i := 0; i < len(m.Versions); i++ {
		if swag.IsZero(m.Versions[i]) { // not required
			continue
		}

		if m.Versions[i] != nil {
			if err := m.Versions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Versions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AgreementProductCollection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AgreementProductCollection) UnmarshalBinary(b []byte) error {
	var res AgreementProductCollection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
