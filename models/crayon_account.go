// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CrayonAccount crayon account
//
// swagger:model CrayonAccount
type CrayonAccount struct {

	// contact
	Contact *CustomerTenantContact `json:"Contact,omitempty"`

	// customer tenant type
	// Enum: [None T1 T2]
	CustomerTenantType string `json:"CustomerTenantType,omitempty"`

	// email
	Email string `json:"Email,omitempty"`

	// entity status
	// Enum: [None Removed]
	EntityStatus string `json:"EntityStatus,omitempty"`

	// external publisher customer Id
	ExternalPublisherCustomerID string `json:"ExternalPublisherCustomerId,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// invoice profile
	InvoiceProfile *ObjectReference `json:"InvoiceProfile,omitempty"`

	// is activated
	IsActivated bool `json:"IsActivated,omitempty"`

	// name
	Name string `json:"Name,omitempty"`

	// organization
	Organization *Organization `json:"Organization,omitempty"`

	// program
	Program *ObjectReference `json:"Program,omitempty"`

	// publisher
	Publisher *ObjectReference `json:"Publisher,omitempty"`

	// reference
	Reference string `json:"Reference,omitempty"`

	// reseller markup
	ResellerMarkup float64 `json:"ResellerMarkup,omitempty"`
}

// Validate validates this crayon account
func (m *CrayonAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCustomerTenantType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntityStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvoiceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublisher(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CrayonAccount) validateContact(formats strfmt.Registry) error {

	if swag.IsZero(m.Contact) { // not required
		return nil
	}

	if m.Contact != nil {
		if err := m.Contact.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Contact")
			}
			return err
		}
	}

	return nil
}

var crayonAccountTypeCustomerTenantTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","T1","T2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		crayonAccountTypeCustomerTenantTypePropEnum = append(crayonAccountTypeCustomerTenantTypePropEnum, v)
	}
}

const (

	// CrayonAccountCustomerTenantTypeNone captures enum value "None"
	CrayonAccountCustomerTenantTypeNone string = "None"

	// CrayonAccountCustomerTenantTypeT1 captures enum value "T1"
	CrayonAccountCustomerTenantTypeT1 string = "T1"

	// CrayonAccountCustomerTenantTypeT2 captures enum value "T2"
	CrayonAccountCustomerTenantTypeT2 string = "T2"
)

// prop value enum
func (m *CrayonAccount) validateCustomerTenantTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, crayonAccountTypeCustomerTenantTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CrayonAccount) validateCustomerTenantType(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomerTenantType) { // not required
		return nil
	}

	// value enum
	if err := m.validateCustomerTenantTypeEnum("CustomerTenantType", "body", m.CustomerTenantType); err != nil {
		return err
	}

	return nil
}

var crayonAccountTypeEntityStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Removed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		crayonAccountTypeEntityStatusPropEnum = append(crayonAccountTypeEntityStatusPropEnum, v)
	}
}

const (

	// CrayonAccountEntityStatusNone captures enum value "None"
	CrayonAccountEntityStatusNone string = "None"

	// CrayonAccountEntityStatusRemoved captures enum value "Removed"
	CrayonAccountEntityStatusRemoved string = "Removed"
)

// prop value enum
func (m *CrayonAccount) validateEntityStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, crayonAccountTypeEntityStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CrayonAccount) validateEntityStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.EntityStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityStatusEnum("EntityStatus", "body", m.EntityStatus); err != nil {
		return err
	}

	return nil
}

func (m *CrayonAccount) validateInvoiceProfile(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceProfile) { // not required
		return nil
	}

	if m.InvoiceProfile != nil {
		if err := m.InvoiceProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("InvoiceProfile")
			}
			return err
		}
	}

	return nil
}

func (m *CrayonAccount) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

func (m *CrayonAccount) validateProgram(formats strfmt.Registry) error {

	if swag.IsZero(m.Program) { // not required
		return nil
	}

	if m.Program != nil {
		if err := m.Program.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Program")
			}
			return err
		}
	}

	return nil
}

func (m *CrayonAccount) validatePublisher(formats strfmt.Registry) error {

	if swag.IsZero(m.Publisher) { // not required
		return nil
	}

	if m.Publisher != nil {
		if err := m.Publisher.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Publisher")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CrayonAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CrayonAccount) UnmarshalBinary(b []byte) error {
	var res CrayonAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
