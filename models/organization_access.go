// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrganizationAccess organization access
//
// swagger:model OrganizationAccess
type OrganizationAccess struct {

	// agreements
	Agreements []*AgreementAccess `json:"Agreements"`

	// all agreements
	AllAgreements bool `json:"AllAgreements,omitempty"`

	// crayon company name
	CrayonCompanyName string `json:"CrayonCompanyName,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// organization
	Organization *Organization `json:"Organization,omitempty"`

	// role
	// Enum: [None User Administrator Viewer EditRights All]
	Role string `json:"Role,omitempty"`

	// timestamp
	// Format: date-time
	Timestamp strfmt.DateTime `json:"Timestamp,omitempty"`

	// user
	User *UserProfile `json:"User,omitempty"`
}

// Validate validates this organization access
func (m *OrganizationAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreements(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrganizationAccess) validateAgreements(formats strfmt.Registry) error {

	if swag.IsZero(m.Agreements) { // not required
		return nil
	}

	for i := 0; i < len(m.Agreements); i++ {
		if swag.IsZero(m.Agreements[i]) { // not required
			continue
		}

		if m.Agreements[i] != nil {
			if err := m.Agreements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("Agreements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *OrganizationAccess) validateOrganization(formats strfmt.Registry) error {

	if swag.IsZero(m.Organization) { // not required
		return nil
	}

	if m.Organization != nil {
		if err := m.Organization.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Organization")
			}
			return err
		}
	}

	return nil
}

var organizationAccessTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","User","Administrator","Viewer","EditRights","All"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		organizationAccessTypeRolePropEnum = append(organizationAccessTypeRolePropEnum, v)
	}
}

const (

	// OrganizationAccessRoleNone captures enum value "None"
	OrganizationAccessRoleNone string = "None"

	// OrganizationAccessRoleUser captures enum value "User"
	OrganizationAccessRoleUser string = "User"

	// OrganizationAccessRoleAdministrator captures enum value "Administrator"
	OrganizationAccessRoleAdministrator string = "Administrator"

	// OrganizationAccessRoleViewer captures enum value "Viewer"
	OrganizationAccessRoleViewer string = "Viewer"

	// OrganizationAccessRoleEditRights captures enum value "EditRights"
	OrganizationAccessRoleEditRights string = "EditRights"

	// OrganizationAccessRoleAll captures enum value "All"
	OrganizationAccessRoleAll string = "All"
)

// prop value enum
func (m *OrganizationAccess) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, organizationAccessTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OrganizationAccess) validateRole(formats strfmt.Registry) error {

	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("Role", "body", m.Role); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationAccess) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("Timestamp", "body", "date-time", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *OrganizationAccess) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("User")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrganizationAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrganizationAccess) UnmarshalBinary(b []byte) error {
	var res OrganizationAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
