// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ProductRowPatch product row patch
//
// swagger:model ProductRowPatch
type ProductRowPatch struct {

	// agreement
	Agreement *ObjectReference `json:"Agreement,omitempty"`

	// comment
	Comment string `json:"Comment,omitempty"`

	// grouping
	Grouping *ObjectReference `json:"Grouping,omitempty"`

	// Id
	ID int32 `json:"Id,omitempty"`

	// product variant
	ProductVariant *ObjectReference `json:"ProductVariant,omitempty"`

	// quantity
	Quantity int32 `json:"Quantity,omitempty"`

	// usage country code
	UsageCountryCode string `json:"UsageCountryCode,omitempty"`

	// user Id
	UserID string `json:"UserId,omitempty"`
}

// Validate validates this product row patch
func (m *ProductRowPatch) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAgreement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrouping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProductVariant(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProductRowPatch) validateAgreement(formats strfmt.Registry) error {

	if swag.IsZero(m.Agreement) { // not required
		return nil
	}

	if m.Agreement != nil {
		if err := m.Agreement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Agreement")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRowPatch) validateGrouping(formats strfmt.Registry) error {

	if swag.IsZero(m.Grouping) { // not required
		return nil
	}

	if m.Grouping != nil {
		if err := m.Grouping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Grouping")
			}
			return err
		}
	}

	return nil
}

func (m *ProductRowPatch) validateProductVariant(formats strfmt.Registry) error {

	if swag.IsZero(m.ProductVariant) { // not required
		return nil
	}

	if m.ProductVariant != nil {
		if err := m.ProductVariant.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ProductVariant")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProductRowPatch) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProductRowPatch) UnmarshalBinary(b []byte) error {
	var res ProductRowPatch
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
