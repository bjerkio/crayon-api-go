// Code generated by go-swagger; DO NOT EDIT.

package customer_tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/bjerkio/crayon-api-go/models"
)

// NewPostCustomerTenantsParams creates a new PostCustomerTenantsParams object
// with the default values initialized.
func NewPostCustomerTenantsParams() *PostCustomerTenantsParams {
	var ()
	return &PostCustomerTenantsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostCustomerTenantsParamsWithTimeout creates a new PostCustomerTenantsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostCustomerTenantsParamsWithTimeout(timeout time.Duration) *PostCustomerTenantsParams {
	var ()
	return &PostCustomerTenantsParams{

		timeout: timeout,
	}
}

// NewPostCustomerTenantsParamsWithContext creates a new PostCustomerTenantsParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostCustomerTenantsParamsWithContext(ctx context.Context) *PostCustomerTenantsParams {
	var ()
	return &PostCustomerTenantsParams{

		Context: ctx,
	}
}

// NewPostCustomerTenantsParamsWithHTTPClient creates a new PostCustomerTenantsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostCustomerTenantsParamsWithHTTPClient(client *http.Client) *PostCustomerTenantsParams {
	var ()
	return &PostCustomerTenantsParams{
		HTTPClient: client,
	}
}

/*PostCustomerTenantsParams contains all the parameters to send to the API endpoint
for the post customer tenants operation typically these are written to a http.Request
*/
type PostCustomerTenantsParams struct {

	/*CustomerTenant*/
	CustomerTenant *models.CustomerTenantDetailed

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post customer tenants params
func (o *PostCustomerTenantsParams) WithTimeout(timeout time.Duration) *PostCustomerTenantsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post customer tenants params
func (o *PostCustomerTenantsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post customer tenants params
func (o *PostCustomerTenantsParams) WithContext(ctx context.Context) *PostCustomerTenantsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post customer tenants params
func (o *PostCustomerTenantsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post customer tenants params
func (o *PostCustomerTenantsParams) WithHTTPClient(client *http.Client) *PostCustomerTenantsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post customer tenants params
func (o *PostCustomerTenantsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCustomerTenant adds the customerTenant to the post customer tenants params
func (o *PostCustomerTenantsParams) WithCustomerTenant(customerTenant *models.CustomerTenantDetailed) *PostCustomerTenantsParams {
	o.SetCustomerTenant(customerTenant)
	return o
}

// SetCustomerTenant adds the customerTenant to the post customer tenants params
func (o *PostCustomerTenantsParams) SetCustomerTenant(customerTenant *models.CustomerTenantDetailed) {
	o.CustomerTenant = customerTenant
}

// WriteToRequest writes these params to a swagger request
func (o *PostCustomerTenantsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CustomerTenant != nil {
		if err := r.SetBodyParam(o.CustomerTenant); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
