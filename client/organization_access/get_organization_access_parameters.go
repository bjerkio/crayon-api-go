// Code generated by go-swagger; DO NOT EDIT.

package organization_access

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationAccessParams creates a new GetOrganizationAccessParams object
// with the default values initialized.
func NewGetOrganizationAccessParams() *GetOrganizationAccessParams {
	var (
		organizationIDDefault = int32(0)
		pageDefault           = int32(1)
		pageSizeDefault       = int32(10000)
	)
	return &GetOrganizationAccessParams{
		OrganizationID: &organizationIDDefault,
		Page:           &pageDefault,
		PageSize:       &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationAccessParamsWithTimeout creates a new GetOrganizationAccessParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrganizationAccessParamsWithTimeout(timeout time.Duration) *GetOrganizationAccessParams {
	var (
		organizationIDDefault = int32(0)
		pageDefault           = int32(1)
		pageSizeDefault       = int32(10000)
	)
	return &GetOrganizationAccessParams{
		OrganizationID: &organizationIDDefault,
		Page:           &pageDefault,
		PageSize:       &pageSizeDefault,

		timeout: timeout,
	}
}

// NewGetOrganizationAccessParamsWithContext creates a new GetOrganizationAccessParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrganizationAccessParamsWithContext(ctx context.Context) *GetOrganizationAccessParams {
	var (
		organizationIdDefault = int32(0)
		pageDefault           = int32(1)
		pageSizeDefault       = int32(10000)
	)
	return &GetOrganizationAccessParams{
		OrganizationID: &organizationIdDefault,
		Page:           &pageDefault,
		PageSize:       &pageSizeDefault,

		Context: ctx,
	}
}

// NewGetOrganizationAccessParamsWithHTTPClient creates a new GetOrganizationAccessParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrganizationAccessParamsWithHTTPClient(client *http.Client) *GetOrganizationAccessParams {
	var (
		organizationIdDefault = int32(0)
		pageDefault           = int32(1)
		pageSizeDefault       = int32(10000)
	)
	return &GetOrganizationAccessParams{
		OrganizationID: &organizationIdDefault,
		Page:           &pageDefault,
		PageSize:       &pageSizeDefault,
		HTTPClient:     client,
	}
}

/*GetOrganizationAccessParams contains all the parameters to send to the API endpoint
for the get organization access operation typically these are written to a http.Request
*/
type GetOrganizationAccessParams struct {

	/*OrganizationID*/
	OrganizationID *int32
	/*Page*/
	Page *int32
	/*PageSize*/
	PageSize *int32
	/*UserID*/
	UserID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get organization access params
func (o *GetOrganizationAccessParams) WithTimeout(timeout time.Duration) *GetOrganizationAccessParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization access params
func (o *GetOrganizationAccessParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization access params
func (o *GetOrganizationAccessParams) WithContext(ctx context.Context) *GetOrganizationAccessParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization access params
func (o *GetOrganizationAccessParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization access params
func (o *GetOrganizationAccessParams) WithHTTPClient(client *http.Client) *GetOrganizationAccessParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization access params
func (o *GetOrganizationAccessParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationID adds the organizationID to the get organization access params
func (o *GetOrganizationAccessParams) WithOrganizationID(organizationID *int32) *GetOrganizationAccessParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get organization access params
func (o *GetOrganizationAccessParams) SetOrganizationID(organizationID *int32) {
	o.OrganizationID = organizationID
}

// WithPage adds the page to the get organization access params
func (o *GetOrganizationAccessParams) WithPage(page *int32) *GetOrganizationAccessParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get organization access params
func (o *GetOrganizationAccessParams) SetPage(page *int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get organization access params
func (o *GetOrganizationAccessParams) WithPageSize(pageSize *int32) *GetOrganizationAccessParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get organization access params
func (o *GetOrganizationAccessParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithUserID adds the userID to the get organization access params
func (o *GetOrganizationAccessParams) WithUserID(userID *string) *GetOrganizationAccessParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get organization access params
func (o *GetOrganizationAccessParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationAccessParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID int32
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := swag.FormatInt32(qrOrganizationID)
		if qOrganizationID != "" {
			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param pageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("pageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param userId
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("userId", qUserID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
