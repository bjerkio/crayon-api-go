// Code generated by go-swagger; DO NOT EDIT.

package product_containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetProductContainersParams creates a new GetProductContainersParams object
// with the default values initialized.
func NewGetProductContainersParams() *GetProductContainersParams {
	var ()
	return &GetProductContainersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProductContainersParamsWithTimeout creates a new GetProductContainersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProductContainersParamsWithTimeout(timeout time.Duration) *GetProductContainersParams {
	var ()
	return &GetProductContainersParams{

		timeout: timeout,
	}
}

// NewGetProductContainersParamsWithContext creates a new GetProductContainersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProductContainersParamsWithContext(ctx context.Context) *GetProductContainersParams {
	var ()
	return &GetProductContainersParams{

		Context: ctx,
	}
}

// NewGetProductContainersParamsWithHTTPClient creates a new GetProductContainersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProductContainersParamsWithHTTPClient(client *http.Client) *GetProductContainersParams {
	var ()
	return &GetProductContainersParams{
		HTTPClient: client,
	}
}

/*GetProductContainersParams contains all the parameters to send to the API endpoint
for the get product containers operation typically these are written to a http.Request
*/
type GetProductContainersParams struct {

	/*ActiveDraft*/
	ActiveDraft *bool
	/*Category*/
	Category *string
	/*From*/
	From *strfmt.DateTime
	/*IncludeRemoved*/
	IncludeRemoved *bool
	/*IncludeSubsidiaries*/
	IncludeSubsidiaries *bool
	/*Month*/
	Month *int32
	/*OrganizationID*/
	OrganizationID *int32
	/*Page*/
	Page *int32
	/*PageSize*/
	PageSize *int32
	/*ProgramID*/
	ProgramID *int32
	/*Search*/
	Search *string
	/*SentByUserID*/
	SentByUserID *string
	/*To*/
	To *strfmt.DateTime
	/*Type*/
	Type *string
	/*UserID*/
	UserID *string
	/*Year*/
	Year *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get product containers params
func (o *GetProductContainersParams) WithTimeout(timeout time.Duration) *GetProductContainersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get product containers params
func (o *GetProductContainersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get product containers params
func (o *GetProductContainersParams) WithContext(ctx context.Context) *GetProductContainersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get product containers params
func (o *GetProductContainersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get product containers params
func (o *GetProductContainersParams) WithHTTPClient(client *http.Client) *GetProductContainersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get product containers params
func (o *GetProductContainersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithActiveDraft adds the activeDraft to the get product containers params
func (o *GetProductContainersParams) WithActiveDraft(activeDraft *bool) *GetProductContainersParams {
	o.SetActiveDraft(activeDraft)
	return o
}

// SetActiveDraft adds the activeDraft to the get product containers params
func (o *GetProductContainersParams) SetActiveDraft(activeDraft *bool) {
	o.ActiveDraft = activeDraft
}

// WithCategory adds the category to the get product containers params
func (o *GetProductContainersParams) WithCategory(category *string) *GetProductContainersParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get product containers params
func (o *GetProductContainersParams) SetCategory(category *string) {
	o.Category = category
}

// WithFrom adds the from to the get product containers params
func (o *GetProductContainersParams) WithFrom(from *strfmt.DateTime) *GetProductContainersParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get product containers params
func (o *GetProductContainersParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithIncludeRemoved adds the includeRemoved to the get product containers params
func (o *GetProductContainersParams) WithIncludeRemoved(includeRemoved *bool) *GetProductContainersParams {
	o.SetIncludeRemoved(includeRemoved)
	return o
}

// SetIncludeRemoved adds the includeRemoved to the get product containers params
func (o *GetProductContainersParams) SetIncludeRemoved(includeRemoved *bool) {
	o.IncludeRemoved = includeRemoved
}

// WithIncludeSubsidiaries adds the includeSubsidiaries to the get product containers params
func (o *GetProductContainersParams) WithIncludeSubsidiaries(includeSubsidiaries *bool) *GetProductContainersParams {
	o.SetIncludeSubsidiaries(includeSubsidiaries)
	return o
}

// SetIncludeSubsidiaries adds the includeSubsidiaries to the get product containers params
func (o *GetProductContainersParams) SetIncludeSubsidiaries(includeSubsidiaries *bool) {
	o.IncludeSubsidiaries = includeSubsidiaries
}

// WithMonth adds the month to the get product containers params
func (o *GetProductContainersParams) WithMonth(month *int32) *GetProductContainersParams {
	o.SetMonth(month)
	return o
}

// SetMonth adds the month to the get product containers params
func (o *GetProductContainersParams) SetMonth(month *int32) {
	o.Month = month
}

// WithOrganizationID adds the organizationID to the get product containers params
func (o *GetProductContainersParams) WithOrganizationID(organizationID *int32) *GetProductContainersParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get product containers params
func (o *GetProductContainersParams) SetOrganizationID(organizationID *int32) {
	o.OrganizationID = organizationID
}

// WithPage adds the page to the get product containers params
func (o *GetProductContainersParams) WithPage(page *int32) *GetProductContainersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get product containers params
func (o *GetProductContainersParams) SetPage(page *int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get product containers params
func (o *GetProductContainersParams) WithPageSize(pageSize *int32) *GetProductContainersParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get product containers params
func (o *GetProductContainersParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithProgramID adds the programID to the get product containers params
func (o *GetProductContainersParams) WithProgramID(programID *int32) *GetProductContainersParams {
	o.SetProgramID(programID)
	return o
}

// SetProgramID adds the programId to the get product containers params
func (o *GetProductContainersParams) SetProgramID(programID *int32) {
	o.ProgramID = programID
}

// WithSearch adds the search to the get product containers params
func (o *GetProductContainersParams) WithSearch(search *string) *GetProductContainersParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get product containers params
func (o *GetProductContainersParams) SetSearch(search *string) {
	o.Search = search
}

// WithSentByUserID adds the sentByUserID to the get product containers params
func (o *GetProductContainersParams) WithSentByUserID(sentByUserID *string) *GetProductContainersParams {
	o.SetSentByUserID(sentByUserID)
	return o
}

// SetSentByUserID adds the sentByUserId to the get product containers params
func (o *GetProductContainersParams) SetSentByUserID(sentByUserID *string) {
	o.SentByUserID = sentByUserID
}

// WithTo adds the to to the get product containers params
func (o *GetProductContainersParams) WithTo(to *strfmt.DateTime) *GetProductContainersParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get product containers params
func (o *GetProductContainersParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WithType adds the typeVar to the get product containers params
func (o *GetProductContainersParams) WithType(typeVar *string) *GetProductContainersParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get product containers params
func (o *GetProductContainersParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithUserID adds the userID to the get product containers params
func (o *GetProductContainersParams) WithUserID(userID *string) *GetProductContainersParams {
	o.SetUserID(userID)
	return o
}

// SetUserID adds the userId to the get product containers params
func (o *GetProductContainersParams) SetUserID(userID *string) {
	o.UserID = userID
}

// WithYear adds the year to the get product containers params
func (o *GetProductContainersParams) WithYear(year *int32) *GetProductContainersParams {
	o.SetYear(year)
	return o
}

// SetYear adds the year to the get product containers params
func (o *GetProductContainersParams) SetYear(year *int32) {
	o.Year = year
}

// WriteToRequest writes these params to a swagger request
func (o *GetProductContainersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ActiveDraft != nil {

		// query param ActiveDraft
		var qrActiveDraft bool
		if o.ActiveDraft != nil {
			qrActiveDraft = *o.ActiveDraft
		}
		qActiveDraft := swag.FormatBool(qrActiveDraft)
		if qActiveDraft != "" {
			if err := r.SetQueryParam("ActiveDraft", qActiveDraft); err != nil {
				return err
			}
		}

	}

	if o.Category != nil {

		// query param Category
		var qrCategory string
		if o.Category != nil {
			qrCategory = *o.Category
		}
		qCategory := qrCategory
		if qCategory != "" {
			if err := r.SetQueryParam("Category", qCategory); err != nil {
				return err
			}
		}

	}

	if o.From != nil {

		// query param From
		var qrFrom strfmt.DateTime
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {
			if err := r.SetQueryParam("From", qFrom); err != nil {
				return err
			}
		}

	}

	if o.IncludeRemoved != nil {

		// query param IncludeRemoved
		var qrIncludeRemoved bool
		if o.IncludeRemoved != nil {
			qrIncludeRemoved = *o.IncludeRemoved
		}
		qIncludeRemoved := swag.FormatBool(qrIncludeRemoved)
		if qIncludeRemoved != "" {
			if err := r.SetQueryParam("IncludeRemoved", qIncludeRemoved); err != nil {
				return err
			}
		}

	}

	if o.IncludeSubsidiaries != nil {

		// query param IncludeSubsidiaries
		var qrIncludeSubsidiaries bool
		if o.IncludeSubsidiaries != nil {
			qrIncludeSubsidiaries = *o.IncludeSubsidiaries
		}
		qIncludeSubsidiaries := swag.FormatBool(qrIncludeSubsidiaries)
		if qIncludeSubsidiaries != "" {
			if err := r.SetQueryParam("IncludeSubsidiaries", qIncludeSubsidiaries); err != nil {
				return err
			}
		}

	}

	if o.Month != nil {

		// query param Month
		var qrMonth int32
		if o.Month != nil {
			qrMonth = *o.Month
		}
		qMonth := swag.FormatInt32(qrMonth)
		if qMonth != "" {
			if err := r.SetQueryParam("Month", qMonth); err != nil {
				return err
			}
		}

	}

	if o.OrganizationID != nil {

		// query param OrganizationId
		var qrOrganizationID int32
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := swag.FormatInt32(qrOrganizationID)
		if qOrganizationID != "" {
			if err := r.SetQueryParam("OrganizationId", qOrganizationID); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param Page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("Page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param PageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("PageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.ProgramID != nil {

		// query param ProgramId
		var qrProgramID int32
		if o.ProgramID != nil {
			qrProgramID = *o.ProgramID
		}
		qProgramID := swag.FormatInt32(qrProgramID)
		if qProgramID != "" {
			if err := r.SetQueryParam("ProgramId", qProgramID); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param Search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("Search", qSearch); err != nil {
				return err
			}
		}

	}

	if o.SentByUserID != nil {

		// query param SentByUserId
		var qrSentByUserID string
		if o.SentByUserID != nil {
			qrSentByUserID = *o.SentByUserID
		}
		qSentByUserID := qrSentByUserID
		if qSentByUserID != "" {
			if err := r.SetQueryParam("SentByUserId", qSentByUserID); err != nil {
				return err
			}
		}

	}

	if o.To != nil {

		// query param To
		var qrTo strfmt.DateTime
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {
			if err := r.SetQueryParam("To", qTo); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param Type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("Type", qType); err != nil {
				return err
			}
		}

	}

	if o.UserID != nil {

		// query param UserId
		var qrUserID string
		if o.UserID != nil {
			qrUserID = *o.UserID
		}
		qUserID := qrUserID
		if qUserID != "" {
			if err := r.SetQueryParam("UserId", qUserID); err != nil {
				return err
			}
		}

	}

	if o.Year != nil {

		// query param Year
		var qrYear int32
		if o.Year != nil {
			qrYear = *o.Year
		}
		qYear := swag.FormatInt32(qrYear)
		if qYear != "" {
			if err := r.SetQueryParam("Year", qYear); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
