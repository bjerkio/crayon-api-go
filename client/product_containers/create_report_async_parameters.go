// Code generated by go-swagger; DO NOT EDIT.

package product_containers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewCreateReportAsyncParams creates a new CreateReportAsyncParams object
// with the default values initialized.
func NewCreateReportAsyncParams() *CreateReportAsyncParams {
	var ()
	return &CreateReportAsyncParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateReportAsyncParamsWithTimeout creates a new CreateReportAsyncParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateReportAsyncParamsWithTimeout(timeout time.Duration) *CreateReportAsyncParams {
	var ()
	return &CreateReportAsyncParams{

		timeout: timeout,
	}
}

// NewCreateReportAsyncParamsWithContext creates a new CreateReportAsyncParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateReportAsyncParamsWithContext(ctx context.Context) *CreateReportAsyncParams {
	var ()
	return &CreateReportAsyncParams{

		Context: ctx,
	}
}

// NewCreateReportAsyncParamsWithHTTPClient creates a new CreateReportAsyncParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateReportAsyncParamsWithHTTPClient(client *http.Client) *CreateReportAsyncParams {
	var ()
	return &CreateReportAsyncParams{
		HTTPClient: client,
	}
}

/*CreateReportAsyncParams contains all the parameters to send to the API endpoint
for the create report async operation typically these are written to a http.Request
*/
type CreateReportAsyncParams struct {

	/*CopyLast*/
	CopyLast *bool
	/*Month*/
	Month *int32
	/*OrganizationID*/
	OrganizationID *int32
	/*ProgramID*/
	ProgramID *int32
	/*Year*/
	Year *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create report async params
func (o *CreateReportAsyncParams) WithTimeout(timeout time.Duration) *CreateReportAsyncParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create report async params
func (o *CreateReportAsyncParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create report async params
func (o *CreateReportAsyncParams) WithContext(ctx context.Context) *CreateReportAsyncParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create report async params
func (o *CreateReportAsyncParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create report async params
func (o *CreateReportAsyncParams) WithHTTPClient(client *http.Client) *CreateReportAsyncParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create report async params
func (o *CreateReportAsyncParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCopyLast adds the copyLast to the create report async params
func (o *CreateReportAsyncParams) WithCopyLast(copyLast *bool) *CreateReportAsyncParams {
	o.SetCopyLast(copyLast)
	return o
}

// SetCopyLast adds the copyLast to the create report async params
func (o *CreateReportAsyncParams) SetCopyLast(copyLast *bool) {
	o.CopyLast = copyLast
}

// WithMonth adds the month to the create report async params
func (o *CreateReportAsyncParams) WithMonth(month *int32) *CreateReportAsyncParams {
	o.SetMonth(month)
	return o
}

// SetMonth adds the month to the create report async params
func (o *CreateReportAsyncParams) SetMonth(month *int32) {
	o.Month = month
}

// WithOrganizationID adds the organizationID to the create report async params
func (o *CreateReportAsyncParams) WithOrganizationID(organizationID *int32) *CreateReportAsyncParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the create report async params
func (o *CreateReportAsyncParams) SetOrganizationID(organizationID *int32) {
	o.OrganizationID = organizationID
}

// WithProgramID adds the programID to the create report async params
func (o *CreateReportAsyncParams) WithProgramID(programID *int32) *CreateReportAsyncParams {
	o.SetProgramID(programID)
	return o
}

// SetProgramID adds the programId to the create report async params
func (o *CreateReportAsyncParams) SetProgramID(programID *int32) {
	o.ProgramID = programID
}

// WithYear adds the year to the create report async params
func (o *CreateReportAsyncParams) WithYear(year *int32) *CreateReportAsyncParams {
	o.SetYear(year)
	return o
}

// SetYear adds the year to the create report async params
func (o *CreateReportAsyncParams) SetYear(year *int32) {
	o.Year = year
}

// WriteToRequest writes these params to a swagger request
func (o *CreateReportAsyncParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CopyLast != nil {

		// query param copyLast
		var qrCopyLast bool
		if o.CopyLast != nil {
			qrCopyLast = *o.CopyLast
		}
		qCopyLast := swag.FormatBool(qrCopyLast)
		if qCopyLast != "" {
			if err := r.SetQueryParam("copyLast", qCopyLast); err != nil {
				return err
			}
		}

	}

	if o.Month != nil {

		// query param month
		var qrMonth int32
		if o.Month != nil {
			qrMonth = *o.Month
		}
		qMonth := swag.FormatInt32(qrMonth)
		if qMonth != "" {
			if err := r.SetQueryParam("month", qMonth); err != nil {
				return err
			}
		}

	}

	if o.OrganizationID != nil {

		// query param organizationId
		var qrOrganizationID int32
		if o.OrganizationID != nil {
			qrOrganizationID = *o.OrganizationID
		}
		qOrganizationID := swag.FormatInt32(qrOrganizationID)
		if qOrganizationID != "" {
			if err := r.SetQueryParam("organizationId", qOrganizationID); err != nil {
				return err
			}
		}

	}

	if o.ProgramID != nil {

		// query param programId
		var qrProgramID int32
		if o.ProgramID != nil {
			qrProgramID = *o.ProgramID
		}
		qProgramID := swag.FormatInt32(qrProgramID)
		if qProgramID != "" {
			if err := r.SetQueryParam("programId", qProgramID); err != nil {
				return err
			}
		}

	}

	if o.Year != nil {

		// query param year
		var qrYear int32
		if o.Year != nil {
			qrYear = *o.Year
		}
		qYear := swag.FormatInt32(qrYear)
		if qYear != "" {
			if err := r.SetQueryParam("year", qYear); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
