// Code generated by go-swagger; DO NOT EDIT.

package billing_cycles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetAllBillingCyclesParams creates a new GetAllBillingCyclesParams object
// with the default values initialized.
func NewGetAllBillingCyclesParams() *GetAllBillingCyclesParams {
	var (
		includeUnknownDefault = bool(false)
	)
	return &GetAllBillingCyclesParams{
		IncludeUnknown: &includeUnknownDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllBillingCyclesParamsWithTimeout creates a new GetAllBillingCyclesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllBillingCyclesParamsWithTimeout(timeout time.Duration) *GetAllBillingCyclesParams {
	var (
		includeUnknownDefault = bool(false)
	)
	return &GetAllBillingCyclesParams{
		IncludeUnknown: &includeUnknownDefault,

		timeout: timeout,
	}
}

// NewGetAllBillingCyclesParamsWithContext creates a new GetAllBillingCyclesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllBillingCyclesParamsWithContext(ctx context.Context) *GetAllBillingCyclesParams {
	var (
		includeUnknownDefault = bool(false)
	)
	return &GetAllBillingCyclesParams{
		IncludeUnknown: &includeUnknownDefault,

		Context: ctx,
	}
}

// NewGetAllBillingCyclesParamsWithHTTPClient creates a new GetAllBillingCyclesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllBillingCyclesParamsWithHTTPClient(client *http.Client) *GetAllBillingCyclesParams {
	var (
		includeUnknownDefault = bool(false)
	)
	return &GetAllBillingCyclesParams{
		IncludeUnknown: &includeUnknownDefault,
		HTTPClient:     client,
	}
}

/*GetAllBillingCyclesParams contains all the parameters to send to the API endpoint
for the get all billing cycles operation typically these are written to a http.Request
*/
type GetAllBillingCyclesParams struct {

	/*IncludeUnknown*/
	IncludeUnknown *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all billing cycles params
func (o *GetAllBillingCyclesParams) WithTimeout(timeout time.Duration) *GetAllBillingCyclesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all billing cycles params
func (o *GetAllBillingCyclesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all billing cycles params
func (o *GetAllBillingCyclesParams) WithContext(ctx context.Context) *GetAllBillingCyclesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all billing cycles params
func (o *GetAllBillingCyclesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all billing cycles params
func (o *GetAllBillingCyclesParams) WithHTTPClient(client *http.Client) *GetAllBillingCyclesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all billing cycles params
func (o *GetAllBillingCyclesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithIncludeUnknown adds the includeUnknown to the get all billing cycles params
func (o *GetAllBillingCyclesParams) WithIncludeUnknown(includeUnknown *bool) *GetAllBillingCyclesParams {
	o.SetIncludeUnknown(includeUnknown)
	return o
}

// SetIncludeUnknown adds the includeUnknown to the get all billing cycles params
func (o *GetAllBillingCyclesParams) SetIncludeUnknown(includeUnknown *bool) {
	o.IncludeUnknown = includeUnknown
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllBillingCyclesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.IncludeUnknown != nil {

		// query param includeUnknown
		var qrIncludeUnknown bool
		if o.IncludeUnknown != nil {
			qrIncludeUnknown = *o.IncludeUnknown
		}
		qIncludeUnknown := swag.FormatBool(qrIncludeUnknown)
		if qIncludeUnknown != "" {
			if err := r.SetQueryParam("includeUnknown", qIncludeUnknown); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
