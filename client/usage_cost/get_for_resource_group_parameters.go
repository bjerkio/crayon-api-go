// Code generated by go-swagger; DO NOT EDIT.

package usage_cost

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetForResourceGroupParams creates a new GetForResourceGroupParams object
// with the default values initialized.
func NewGetForResourceGroupParams() *GetForResourceGroupParams {
	var ()
	return &GetForResourceGroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetForResourceGroupParamsWithTimeout creates a new GetForResourceGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetForResourceGroupParamsWithTimeout(timeout time.Duration) *GetForResourceGroupParams {
	var ()
	return &GetForResourceGroupParams{

		timeout: timeout,
	}
}

// NewGetForResourceGroupParamsWithContext creates a new GetForResourceGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetForResourceGroupParamsWithContext(ctx context.Context) *GetForResourceGroupParams {
	var ()
	return &GetForResourceGroupParams{

		Context: ctx,
	}
}

// NewGetForResourceGroupParamsWithHTTPClient creates a new GetForResourceGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetForResourceGroupParamsWithHTTPClient(client *http.Client) *GetForResourceGroupParams {
	var ()
	return &GetForResourceGroupParams{
		HTTPClient: client,
	}
}

/*GetForResourceGroupParams contains all the parameters to send to the API endpoint
for the get for resource group operation typically these are written to a http.Request
*/
type GetForResourceGroupParams struct {

	/*CurrencyCode*/
	CurrencyCode string
	/*From*/
	From *strfmt.DateTime
	/*ResellerCustomerID*/
	ResellerCustomerID int32
	/*ResourceGroup*/
	ResourceGroup string
	/*SubscriptionID*/
	SubscriptionID string
	/*To*/
	To *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get for resource group params
func (o *GetForResourceGroupParams) WithTimeout(timeout time.Duration) *GetForResourceGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get for resource group params
func (o *GetForResourceGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get for resource group params
func (o *GetForResourceGroupParams) WithContext(ctx context.Context) *GetForResourceGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get for resource group params
func (o *GetForResourceGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get for resource group params
func (o *GetForResourceGroupParams) WithHTTPClient(client *http.Client) *GetForResourceGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get for resource group params
func (o *GetForResourceGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCurrencyCode adds the currencyCode to the get for resource group params
func (o *GetForResourceGroupParams) WithCurrencyCode(currencyCode string) *GetForResourceGroupParams {
	o.SetCurrencyCode(currencyCode)
	return o
}

// SetCurrencyCode adds the currencyCode to the get for resource group params
func (o *GetForResourceGroupParams) SetCurrencyCode(currencyCode string) {
	o.CurrencyCode = currencyCode
}

// WithFrom adds the from to the get for resource group params
func (o *GetForResourceGroupParams) WithFrom(from *strfmt.DateTime) *GetForResourceGroupParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get for resource group params
func (o *GetForResourceGroupParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithResellerCustomerID adds the resellerCustomerID to the get for resource group params
func (o *GetForResourceGroupParams) WithResellerCustomerID(resellerCustomerID int32) *GetForResourceGroupParams {
	o.SetResellerCustomerID(resellerCustomerID)
	return o
}

// SetResellerCustomerID adds the resellerCustomerId to the get for resource group params
func (o *GetForResourceGroupParams) SetResellerCustomerID(resellerCustomerID int32) {
	o.ResellerCustomerID = resellerCustomerID
}

// WithResourceGroup adds the resourceGroup to the get for resource group params
func (o *GetForResourceGroupParams) WithResourceGroup(resourceGroup string) *GetForResourceGroupParams {
	o.SetResourceGroup(resourceGroup)
	return o
}

// SetResourceGroup adds the resourceGroup to the get for resource group params
func (o *GetForResourceGroupParams) SetResourceGroup(resourceGroup string) {
	o.ResourceGroup = resourceGroup
}

// WithSubscriptionID adds the subscriptionID to the get for resource group params
func (o *GetForResourceGroupParams) WithSubscriptionID(subscriptionID string) *GetForResourceGroupParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the get for resource group params
func (o *GetForResourceGroupParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WithTo adds the to to the get for resource group params
func (o *GetForResourceGroupParams) WithTo(to *strfmt.DateTime) *GetForResourceGroupParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get for resource group params
func (o *GetForResourceGroupParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetForResourceGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param currencyCode
	if err := r.SetPathParam("currencyCode", o.CurrencyCode); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom strfmt.DateTime
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	// path param resellerCustomerId
	if err := r.SetPathParam("resellerCustomerId", swag.FormatInt32(o.ResellerCustomerID)); err != nil {
		return err
	}

	// path param resourceGroup
	if err := r.SetPathParam("resourceGroup", o.ResourceGroup); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.DateTime
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
