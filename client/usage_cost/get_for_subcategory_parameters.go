// Code generated by go-swagger; DO NOT EDIT.

package usage_cost

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetForSubcategoryParams creates a new GetForSubcategoryParams object
// with the default values initialized.
func NewGetForSubcategoryParams() *GetForSubcategoryParams {
	var ()
	return &GetForSubcategoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetForSubcategoryParamsWithTimeout creates a new GetForSubcategoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetForSubcategoryParamsWithTimeout(timeout time.Duration) *GetForSubcategoryParams {
	var ()
	return &GetForSubcategoryParams{

		timeout: timeout,
	}
}

// NewGetForSubcategoryParamsWithContext creates a new GetForSubcategoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetForSubcategoryParamsWithContext(ctx context.Context) *GetForSubcategoryParams {
	var ()
	return &GetForSubcategoryParams{

		Context: ctx,
	}
}

// NewGetForSubcategoryParamsWithHTTPClient creates a new GetForSubcategoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetForSubcategoryParamsWithHTTPClient(client *http.Client) *GetForSubcategoryParams {
	var ()
	return &GetForSubcategoryParams{
		HTTPClient: client,
	}
}

/*GetForSubcategoryParams contains all the parameters to send to the API endpoint
for the get for subcategory operation typically these are written to a http.Request
*/
type GetForSubcategoryParams struct {

	/*Category*/
	Category string
	/*CurrencyCode*/
	CurrencyCode string
	/*From*/
	From *strfmt.DateTime
	/*ResellerCustomerID*/
	ResellerCustomerID int32
	/*Subcategory*/
	Subcategory string
	/*SubscriptionID*/
	SubscriptionID string
	/*To*/
	To *strfmt.DateTime

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get for subcategory params
func (o *GetForSubcategoryParams) WithTimeout(timeout time.Duration) *GetForSubcategoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get for subcategory params
func (o *GetForSubcategoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get for subcategory params
func (o *GetForSubcategoryParams) WithContext(ctx context.Context) *GetForSubcategoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get for subcategory params
func (o *GetForSubcategoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get for subcategory params
func (o *GetForSubcategoryParams) WithHTTPClient(client *http.Client) *GetForSubcategoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get for subcategory params
func (o *GetForSubcategoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCategory adds the category to the get for subcategory params
func (o *GetForSubcategoryParams) WithCategory(category string) *GetForSubcategoryParams {
	o.SetCategory(category)
	return o
}

// SetCategory adds the category to the get for subcategory params
func (o *GetForSubcategoryParams) SetCategory(category string) {
	o.Category = category
}

// WithCurrencyCode adds the currencyCode to the get for subcategory params
func (o *GetForSubcategoryParams) WithCurrencyCode(currencyCode string) *GetForSubcategoryParams {
	o.SetCurrencyCode(currencyCode)
	return o
}

// SetCurrencyCode adds the currencyCode to the get for subcategory params
func (o *GetForSubcategoryParams) SetCurrencyCode(currencyCode string) {
	o.CurrencyCode = currencyCode
}

// WithFrom adds the from to the get for subcategory params
func (o *GetForSubcategoryParams) WithFrom(from *strfmt.DateTime) *GetForSubcategoryParams {
	o.SetFrom(from)
	return o
}

// SetFrom adds the from to the get for subcategory params
func (o *GetForSubcategoryParams) SetFrom(from *strfmt.DateTime) {
	o.From = from
}

// WithResellerCustomerID adds the resellerCustomerID to the get for subcategory params
func (o *GetForSubcategoryParams) WithResellerCustomerID(resellerCustomerID int32) *GetForSubcategoryParams {
	o.SetResellerCustomerID(resellerCustomerID)
	return o
}

// SetResellerCustomerID adds the resellerCustomerId to the get for subcategory params
func (o *GetForSubcategoryParams) SetResellerCustomerID(resellerCustomerID int32) {
	o.ResellerCustomerID = resellerCustomerID
}

// WithSubcategory adds the subcategory to the get for subcategory params
func (o *GetForSubcategoryParams) WithSubcategory(subcategory string) *GetForSubcategoryParams {
	o.SetSubcategory(subcategory)
	return o
}

// SetSubcategory adds the subcategory to the get for subcategory params
func (o *GetForSubcategoryParams) SetSubcategory(subcategory string) {
	o.Subcategory = subcategory
}

// WithSubscriptionID adds the subscriptionID to the get for subcategory params
func (o *GetForSubcategoryParams) WithSubscriptionID(subscriptionID string) *GetForSubcategoryParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the get for subcategory params
func (o *GetForSubcategoryParams) SetSubscriptionID(subscriptionID string) {
	o.SubscriptionID = subscriptionID
}

// WithTo adds the to to the get for subcategory params
func (o *GetForSubcategoryParams) WithTo(to *strfmt.DateTime) *GetForSubcategoryParams {
	o.SetTo(to)
	return o
}

// SetTo adds the to to the get for subcategory params
func (o *GetForSubcategoryParams) SetTo(to *strfmt.DateTime) {
	o.To = to
}

// WriteToRequest writes these params to a swagger request
func (o *GetForSubcategoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param category
	if err := r.SetPathParam("category", o.Category); err != nil {
		return err
	}

	// path param currencyCode
	if err := r.SetPathParam("currencyCode", o.CurrencyCode); err != nil {
		return err
	}

	if o.From != nil {

		// query param from
		var qrFrom strfmt.DateTime
		if o.From != nil {
			qrFrom = *o.From
		}
		qFrom := qrFrom.String()
		if qFrom != "" {
			if err := r.SetQueryParam("from", qFrom); err != nil {
				return err
			}
		}

	}

	// path param resellerCustomerId
	if err := r.SetPathParam("resellerCustomerId", swag.FormatInt32(o.ResellerCustomerID)); err != nil {
		return err
	}

	// path param subcategory
	if err := r.SetPathParam("subcategory", o.Subcategory); err != nil {
		return err
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", o.SubscriptionID); err != nil {
		return err
	}

	if o.To != nil {

		// query param to
		var qrTo strfmt.DateTime
		if o.To != nil {
			qrTo = *o.To
		}
		qTo := qrTo.String()
		if qTo != "" {
			if err := r.SetQueryParam("to", qTo); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
