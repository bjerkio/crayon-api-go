// Code generated by go-swagger; DO NOT EDIT.

package usage_cost

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new usage cost API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for usage cost API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetForCategory(params *GetForCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetForCategoryOK, error)

	GetForOrganization(params *GetForOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*GetForOrganizationOK, error)

	GetForResourceGroup(params *GetForResourceGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetForResourceGroupOK, error)

	GetForSubcategory(params *GetForSubcategoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetForSubcategoryOK, error)

	GetForSubscription(params *GetForSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetForSubscriptionOK, error)

	GetForSubscriptionWithResourceGroups(params *GetForSubscriptionWithResourceGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetForSubscriptionWithResourceGroupsOK, error)

	PostAPIV1UsageCostGetForCategory(params *PostAPIV1UsageCostGetForCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForCategoryOK, error)

	PostAPIV1UsageCostGetForResourceGroup(params *PostAPIV1UsageCostGetForResourceGroupParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForResourceGroupOK, error)

	PostAPIV1UsageCostGetForSubcategory(params *PostAPIV1UsageCostGetForSubcategoryParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForSubcategoryOK, error)

	PostAPIV1UsageCostGetForSubscription(params *PostAPIV1UsageCostGetForSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForSubscriptionOK, error)

	PostAPIV1UsageCostGetForSubscriptionResourceGroups(params *PostAPIV1UsageCostGetForSubscriptionResourceGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForSubscriptionResourceGroupsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetForCategory get for category API
*/
func (a *Client) GetForCategory(params *GetForCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetForCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetForCategory",
		Method:             "GET",
		PathPattern:        "/api/v1/UsageCost/resellerCustomer/{resellerCustomerId}/subscription/{subscriptionId}/category/{category}/currency/{currencyCode}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetForCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetForCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetForOrganization get for organization API
*/
func (a *Client) GetForOrganization(params *GetForOrganizationParams, authInfo runtime.ClientAuthInfoWriter) (*GetForOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetForOrganization",
		Method:             "GET",
		PathPattern:        "/api/v1/UsageCost/organization/{organizationId}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetForOrganizationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForOrganizationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetForOrganization: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetForResourceGroup get for resource group API
*/
func (a *Client) GetForResourceGroup(params *GetForResourceGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetForResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForResourceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetForResourceGroup",
		Method:             "GET",
		PathPattern:        "/api/v1/UsageCost/resellerCustomer/{resellerCustomerId}/subscription/{subscriptionId}/resourceGroup/{resourceGroup}/currency/{currencyCode}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetForResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetForResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetForSubcategory get for subcategory API
*/
func (a *Client) GetForSubcategory(params *GetForSubcategoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetForSubcategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForSubcategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetForSubcategory",
		Method:             "GET",
		PathPattern:        "/api/v1/UsageCost/resellerCustomer/{resellerCustomerId}/subscription/{subscriptionId}/category/{category}/subcategory/{subcategory}/currency/{currencyCode}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetForSubcategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForSubcategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetForSubcategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetForSubscription get for subscription API
*/
func (a *Client) GetForSubscription(params *GetForSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*GetForSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetForSubscription",
		Method:             "GET",
		PathPattern:        "/api/v1/UsageCost/resellerCustomer/{resellerCustomerId}/subscription/{subscriptionId}/currency/{currencyCode}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetForSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetForSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetForSubscriptionWithResourceGroups get for subscription with resource groups API
*/
func (a *Client) GetForSubscriptionWithResourceGroups(params *GetForSubscriptionWithResourceGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*GetForSubscriptionWithResourceGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetForSubscriptionWithResourceGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetForSubscriptionWithResourceGroups",
		Method:             "GET",
		PathPattern:        "/api/v1/UsageCost/resellerCustomer/{resellerCustomerId}/subscription/{subscriptionId}/currency/{currencyCode}/resourceGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetForSubscriptionWithResourceGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetForSubscriptionWithResourceGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetForSubscriptionWithResourceGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV1UsageCostGetForCategory post API v1 usage cost get for category API
*/
func (a *Client) PostAPIV1UsageCostGetForCategory(params *PostAPIV1UsageCostGetForCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1UsageCostGetForCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV1UsageCostGetForCategory",
		Method:             "POST",
		PathPattern:        "/api/v1/UsageCost/getForCategory",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1UsageCostGetForCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1UsageCostGetForCategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1UsageCostGetForCategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV1UsageCostGetForResourceGroup post API v1 usage cost get for resource group API
*/
func (a *Client) PostAPIV1UsageCostGetForResourceGroup(params *PostAPIV1UsageCostGetForResourceGroupParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForResourceGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1UsageCostGetForResourceGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV1UsageCostGetForResourceGroup",
		Method:             "POST",
		PathPattern:        "/api/v1/UsageCost/getForResourceGroup",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1UsageCostGetForResourceGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1UsageCostGetForResourceGroupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1UsageCostGetForResourceGroup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV1UsageCostGetForSubcategory post API v1 usage cost get for subcategory API
*/
func (a *Client) PostAPIV1UsageCostGetForSubcategory(params *PostAPIV1UsageCostGetForSubcategoryParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForSubcategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1UsageCostGetForSubcategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV1UsageCostGetForSubcategory",
		Method:             "POST",
		PathPattern:        "/api/v1/UsageCost/getForSubcategory",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1UsageCostGetForSubcategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1UsageCostGetForSubcategoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1UsageCostGetForSubcategory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV1UsageCostGetForSubscription post API v1 usage cost get for subscription API
*/
func (a *Client) PostAPIV1UsageCostGetForSubscription(params *PostAPIV1UsageCostGetForSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1UsageCostGetForSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV1UsageCostGetForSubscription",
		Method:             "POST",
		PathPattern:        "/api/v1/UsageCost/getForSubscription",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1UsageCostGetForSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1UsageCostGetForSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1UsageCostGetForSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV1UsageCostGetForSubscriptionResourceGroups post API v1 usage cost get for subscription resource groups API
*/
func (a *Client) PostAPIV1UsageCostGetForSubscriptionResourceGroups(params *PostAPIV1UsageCostGetForSubscriptionResourceGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1UsageCostGetForSubscriptionResourceGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1UsageCostGetForSubscriptionResourceGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV1UsageCostGetForSubscriptionResourceGroups",
		Method:             "POST",
		PathPattern:        "/api/v1/UsageCost/getForSubscription/resourceGroups",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1UsageCostGetForSubscriptionResourceGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1UsageCostGetForSubscriptionResourceGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1UsageCostGetForSubscriptionResourceGroups: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
