// Code generated by go-swagger; DO NOT EDIT.

package groupings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new groupings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for groupings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateGroupings(params *CreateGroupingsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGroupingsOK, error)

	DeleteGroupings(params *DeleteGroupingsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupingsOK, error)

	GetGroupings(params *GetGroupingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupingsOK, error)

	UpdateGroupings(params *UpdateGroupingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGroupingsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateGroupings create groupings API
*/
func (a *Client) CreateGroupings(params *CreateGroupingsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGroupingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateGroupings",
		Method:             "POST",
		PathPattern:        "/api/v1/Groupings",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGroupingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateGroupingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateGroupings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteGroupings delete groupings API
*/
func (a *Client) DeleteGroupings(params *DeleteGroupingsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteGroupings",
		Method:             "DELETE",
		PathPattern:        "/api/v1/Groupings/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteGroupingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteGroupings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetGroupings get groupings API
*/
func (a *Client) GetGroupings(params *GetGroupingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetGroupings",
		Method:             "GET",
		PathPattern:        "/api/v1/Groupings",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetGroupingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetGroupings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateGroupings update groupings API
*/
func (a *Client) UpdateGroupings(params *UpdateGroupingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGroupingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateGroupings",
		Method:             "PUT",
		PathPattern:        "/api/v1/Groupings/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGroupingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateGroupingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateGroupings: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
