// Code generated by go-swagger; DO NOT EDIT.

package secrets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteSecretsParams creates a new DeleteSecretsParams object
// with the default values initialized.
func NewDeleteSecretsParams() *DeleteSecretsParams {
	var ()
	return &DeleteSecretsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteSecretsParamsWithTimeout creates a new DeleteSecretsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteSecretsParamsWithTimeout(timeout time.Duration) *DeleteSecretsParams {
	var ()
	return &DeleteSecretsParams{

		timeout: timeout,
	}
}

// NewDeleteSecretsParamsWithContext creates a new DeleteSecretsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteSecretsParamsWithContext(ctx context.Context) *DeleteSecretsParams {
	var ()
	return &DeleteSecretsParams{

		Context: ctx,
	}
}

// NewDeleteSecretsParamsWithHTTPClient creates a new DeleteSecretsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteSecretsParamsWithHTTPClient(client *http.Client) *DeleteSecretsParams {
	var ()
	return &DeleteSecretsParams{
		HTTPClient: client,
	}
}

/*DeleteSecretsParams contains all the parameters to send to the API endpoint
for the delete secrets operation typically these are written to a http.Request
*/
type DeleteSecretsParams struct {

	/*ClientID*/
	ClientID *string
	/*SecretID*/
	SecretID *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete secrets params
func (o *DeleteSecretsParams) WithTimeout(timeout time.Duration) *DeleteSecretsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete secrets params
func (o *DeleteSecretsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete secrets params
func (o *DeleteSecretsParams) WithContext(ctx context.Context) *DeleteSecretsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete secrets params
func (o *DeleteSecretsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete secrets params
func (o *DeleteSecretsParams) WithHTTPClient(client *http.Client) *DeleteSecretsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete secrets params
func (o *DeleteSecretsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClientID adds the clientID to the delete secrets params
func (o *DeleteSecretsParams) WithClientID(clientID *string) *DeleteSecretsParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the delete secrets params
func (o *DeleteSecretsParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithSecretID adds the secretID to the delete secrets params
func (o *DeleteSecretsParams) WithSecretID(secretID *int32) *DeleteSecretsParams {
	o.SetSecretID(secretID)
	return o
}

// SetSecretID adds the secretId to the delete secrets params
func (o *DeleteSecretsParams) SetSecretID(secretID *int32) {
	o.SecretID = secretID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteSecretsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClientID != nil {

		// query param clientId
		var qrClientID string
		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := qrClientID
		if qClientID != "" {
			if err := r.SetQueryParam("clientId", qClientID); err != nil {
				return err
			}
		}

	}

	if o.SecretID != nil {

		// query param secretId
		var qrSecretID int32
		if o.SecretID != nil {
			qrSecretID = *o.SecretID
		}
		qSecretID := swag.FormatInt32(qrSecretID)
		if qSecretID != "" {
			if err := r.SetQueryParam("secretId", qSecretID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
