// Code generated by go-swagger; DO NOT EDIT.

package azure_plans

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new azure plans API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for azure plans API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AssignUniqueAdmin(params *AssignUniqueAdminParams, authInfo runtime.ClientAuthInfoWriter) (*AssignUniqueAdminOK, error)

	Cancel(params *CancelParams, authInfo runtime.ClientAuthInfoWriter) (*CancelOK, error)

	CreateSubscription(params *CreateSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubscriptionOK, error)

	Enable(params *EnableParams, authInfo runtime.ClientAuthInfoWriter) (*EnableOK, error)

	GetSubscriptionByID(params *GetSubscriptionByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionByIDOK, error)

	PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnable(params *PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnableParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnableOK, error)

	UpdateSubscription(params *UpdateSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSubscriptionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AssignUniqueAdmin assign unique admin API
*/
func (a *Client) AssignUniqueAdmin(params *AssignUniqueAdminParams, authInfo runtime.ClientAuthInfoWriter) (*AssignUniqueAdminOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAssignUniqueAdminParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AssignUniqueAdmin",
		Method:             "PUT",
		PathPattern:        "/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/assign-unique-admin",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AssignUniqueAdminReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AssignUniqueAdminOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AssignUniqueAdmin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Cancel cancel API
*/
func (a *Client) Cancel(params *CancelParams, authInfo runtime.ClientAuthInfoWriter) (*CancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Cancel",
		Method:             "POST",
		PathPattern:        "/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/cancel",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CancelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Cancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  CreateSubscription create subscription API
*/
func (a *Client) CreateSubscription(params *CreateSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateSubscription",
		Method:             "POST",
		PathPattern:        "/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Enable enable API
*/
func (a *Client) Enable(params *EnableParams, authInfo runtime.ClientAuthInfoWriter) (*EnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Enable",
		Method:             "PATCH",
		PathPattern:        "/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/rename",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &EnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EnableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Enable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSubscriptionByID get subscription by Id API
*/
func (a *Client) GetSubscriptionByID(params *GetSubscriptionByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubscriptionById",
		Method:             "GET",
		PathPattern:        "/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSubscriptionById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnable post API v1 azure plans azure plan ID azure subscriptions ID enable API
*/
func (a *Client) PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnable(params *PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnableParams, authInfo runtime.ClientAuthInfoWriter) (*PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnable",
		Method:             "POST",
		PathPattern:        "/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}/enable",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnableOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostAPIV1AzurePlansAzurePlanIDAzureSubscriptionsIDEnable: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSubscription update subscription API
*/
func (a *Client) UpdateSubscription(params *UpdateSubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateSubscription",
		Method:             "PUT",
		PathPattern:        "/api/v1/AzurePlans/{azurePlanId}/azureSubscriptions/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSubscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
