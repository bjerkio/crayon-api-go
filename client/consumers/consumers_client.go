// Code generated by go-swagger; DO NOT EDIT.

package consumers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new consumers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for consumers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	AddConsumer(params *AddConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*AddConsumerOK, error)

	DeleteConsumer(params *DeleteConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConsumerOK, error)

	GetConsumerByID(params *GetConsumerByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetConsumerByIDOK, error)

	UpdateConsumer(params *UpdateConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConsumerOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  AddConsumer add consumer API
*/
func (a *Client) AddConsumer(params *AddConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*AddConsumerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddConsumerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "AddConsumer",
		Method:             "POST",
		PathPattern:        "/api/v1/Consumers",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AddConsumerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AddConsumerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for AddConsumer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteConsumer delete consumer API
*/
func (a *Client) DeleteConsumer(params *DeleteConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteConsumerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteConsumerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteConsumer",
		Method:             "DELETE",
		PathPattern:        "/api/v1/Consumers/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteConsumerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteConsumerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteConsumer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetConsumerByID get consumer by Id API
*/
func (a *Client) GetConsumerByID(params *GetConsumerByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetConsumerByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetConsumerByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetConsumerById",
		Method:             "GET",
		PathPattern:        "/api/v1/Consumers/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetConsumerByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetConsumerByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetConsumerById: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateConsumer update consumer API
*/
func (a *Client) UpdateConsumer(params *UpdateConsumerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateConsumerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateConsumerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateConsumer",
		Method:             "PUT",
		PathPattern:        "/api/v1/Consumers/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateConsumerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateConsumerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateConsumer: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
