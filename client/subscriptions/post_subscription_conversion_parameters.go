// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/bjerkio/crayon-api-go/models"
)

// NewPostSubscriptionConversionParams creates a new PostSubscriptionConversionParams object
// with the default values initialized.
func NewPostSubscriptionConversionParams() *PostSubscriptionConversionParams {
	var ()
	return &PostSubscriptionConversionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewPostSubscriptionConversionParamsWithTimeout creates a new PostSubscriptionConversionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewPostSubscriptionConversionParamsWithTimeout(timeout time.Duration) *PostSubscriptionConversionParams {
	var ()
	return &PostSubscriptionConversionParams{

		timeout: timeout,
	}
}

// NewPostSubscriptionConversionParamsWithContext creates a new PostSubscriptionConversionParams object
// with the default values initialized, and the ability to set a context for a request
func NewPostSubscriptionConversionParamsWithContext(ctx context.Context) *PostSubscriptionConversionParams {
	var ()
	return &PostSubscriptionConversionParams{

		Context: ctx,
	}
}

// NewPostSubscriptionConversionParamsWithHTTPClient creates a new PostSubscriptionConversionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewPostSubscriptionConversionParamsWithHTTPClient(client *http.Client) *PostSubscriptionConversionParams {
	var ()
	return &PostSubscriptionConversionParams{
		HTTPClient: client,
	}
}

/*PostSubscriptionConversionParams contains all the parameters to send to the API endpoint
for the post subscription conversion operation typically these are written to a http.Request
*/
type PostSubscriptionConversionParams struct {

	/*Conversion*/
	Conversion *models.SubscriptionConversion
	/*SubscriptionID*/
	SubscriptionID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the post subscription conversion params
func (o *PostSubscriptionConversionParams) WithTimeout(timeout time.Duration) *PostSubscriptionConversionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the post subscription conversion params
func (o *PostSubscriptionConversionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the post subscription conversion params
func (o *PostSubscriptionConversionParams) WithContext(ctx context.Context) *PostSubscriptionConversionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the post subscription conversion params
func (o *PostSubscriptionConversionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the post subscription conversion params
func (o *PostSubscriptionConversionParams) WithHTTPClient(client *http.Client) *PostSubscriptionConversionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the post subscription conversion params
func (o *PostSubscriptionConversionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConversion adds the conversion to the post subscription conversion params
func (o *PostSubscriptionConversionParams) WithConversion(conversion *models.SubscriptionConversion) *PostSubscriptionConversionParams {
	o.SetConversion(conversion)
	return o
}

// SetConversion adds the conversion to the post subscription conversion params
func (o *PostSubscriptionConversionParams) SetConversion(conversion *models.SubscriptionConversion) {
	o.Conversion = conversion
}

// WithSubscriptionID adds the subscriptionID to the post subscription conversion params
func (o *PostSubscriptionConversionParams) WithSubscriptionID(subscriptionID int32) *PostSubscriptionConversionParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the post subscription conversion params
func (o *PostSubscriptionConversionParams) SetSubscriptionID(subscriptionID int32) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *PostSubscriptionConversionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Conversion != nil {
		if err := r.SetBodyParam(o.Conversion); err != nil {
			return err
		}
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", swag.FormatInt32(o.SubscriptionID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
