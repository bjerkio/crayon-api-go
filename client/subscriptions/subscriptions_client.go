// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new subscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for subscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateSubscriptions(params *CreateSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubscriptionsOK, error)

	DeleteSubscriptionTags(params *DeleteSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSubscriptionTagsOK, error)

	GetActivationLinkAsync(params *GetActivationLinkAsyncParams, authInfo runtime.ClientAuthInfoWriter) (*GetActivationLinkAsyncOK, error)

	GetRegisterReservedInstance(params *GetRegisterReservedInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegisterReservedInstanceOK, error)

	GetSubscriptionAddons(params *GetSubscriptionAddonsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionAddonsOK, error)

	GetSubscriptionConversions(params *GetSubscriptionConversionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionConversionsOK, error)

	GetSubscriptionPriceTypes(params *GetSubscriptionPriceTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionPriceTypesOK, error)

	GetSubscriptionTags(params *GetSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionTagsOK, error)

	GetSubscriptions(params *GetSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionsOK, error)

	PostSubscriptionConversion(params *PostSubscriptionConversionParams, authInfo runtime.ClientAuthInfoWriter) (*PostSubscriptionConversionOK, error)

	RegisterReservedInstance(params *RegisterReservedInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterReservedInstanceOK, error)

	SetSubscriptionAddon(params *SetSubscriptionAddonParams, authInfo runtime.ClientAuthInfoWriter) (*SetSubscriptionAddonOK, error)

	SetSubscriptionTags(params *SetSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter) (*SetSubscriptionTagsOK, error)

	Subscription(params *SubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*SubscriptionOK, error)

	UpdateSubscriptions(params *UpdateSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSubscriptionsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  CreateSubscriptions create subscriptions API
*/
func (a *Client) CreateSubscriptions(params *CreateSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateSubscriptions",
		Method:             "POST",
		PathPattern:        "/api/v1/Subscriptions",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for CreateSubscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  DeleteSubscriptionTags delete subscription tags API
*/
func (a *Client) DeleteSubscriptionTags(params *DeleteSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSubscriptionTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubscriptionTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteSubscriptionTags",
		Method:             "DELETE",
		PathPattern:        "/api/v1/Subscriptions/{subscriptionId}/tags",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteSubscriptionTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteSubscriptionTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteSubscriptionTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetActivationLinkAsync get activation link async API
*/
func (a *Client) GetActivationLinkAsync(params *GetActivationLinkAsyncParams, authInfo runtime.ClientAuthInfoWriter) (*GetActivationLinkAsyncOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActivationLinkAsyncParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetActivationLinkAsync",
		Method:             "GET",
		PathPattern:        "/api/v1/Subscriptions/{id}/activationlink",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetActivationLinkAsyncReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActivationLinkAsyncOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetActivationLinkAsync: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetRegisterReservedInstance get register reserved instance API
*/
func (a *Client) GetRegisterReservedInstance(params *GetRegisterReservedInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*GetRegisterReservedInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegisterReservedInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetRegisterReservedInstance",
		Method:             "GET",
		PathPattern:        "/api/v1/Subscriptions/{reservedInstance}/subscriptionId/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetRegisterReservedInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRegisterReservedInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetRegisterReservedInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSubscriptionAddons get subscription addons API
*/
func (a *Client) GetSubscriptionAddons(params *GetSubscriptionAddonsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionAddonsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionAddonsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubscriptionAddons",
		Method:             "GET",
		PathPattern:        "/api/v1/Subscriptions/{subscriptionId}/addon-offers",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionAddonsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionAddonsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSubscriptionAddons: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSubscriptionConversions get subscription conversions API
*/
func (a *Client) GetSubscriptionConversions(params *GetSubscriptionConversionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionConversionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionConversionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubscriptionConversions",
		Method:             "GET",
		PathPattern:        "/api/v1/Subscriptions/{subscriptionId}/conversions",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionConversionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionConversionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSubscriptionConversions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSubscriptionPriceTypes get subscription price types API
*/
func (a *Client) GetSubscriptionPriceTypes(params *GetSubscriptionPriceTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionPriceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionPriceTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubscriptionPriceTypes",
		Method:             "GET",
		PathPattern:        "/api/v1/Subscriptions/subscriptionpricetypes",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionPriceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionPriceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSubscriptionPriceTypes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSubscriptionTags get subscription tags API
*/
func (a *Client) GetSubscriptionTags(params *GetSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubscriptionTags",
		Method:             "GET",
		PathPattern:        "/api/v1/Subscriptions/{subscriptionId}/tags",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSubscriptionTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetSubscriptions get subscriptions API
*/
func (a *Client) GetSubscriptions(params *GetSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetSubscriptions",
		Method:             "GET",
		PathPattern:        "/api/v1/Subscriptions",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetSubscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  PostSubscriptionConversion post subscription conversion API
*/
func (a *Client) PostSubscriptionConversion(params *PostSubscriptionConversionParams, authInfo runtime.ClientAuthInfoWriter) (*PostSubscriptionConversionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSubscriptionConversionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostSubscriptionConversion",
		Method:             "POST",
		PathPattern:        "/api/v1/Subscriptions/{subscriptionId}/conversions",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &PostSubscriptionConversionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostSubscriptionConversionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostSubscriptionConversion: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  RegisterReservedInstance register reserved instance API
*/
func (a *Client) RegisterReservedInstance(params *RegisterReservedInstanceParams, authInfo runtime.ClientAuthInfoWriter) (*RegisterReservedInstanceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterReservedInstanceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "RegisterReservedInstance",
		Method:             "POST",
		PathPattern:        "/api/v1/Subscriptions/{reservedInstance}/subscriptionId/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterReservedInstanceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterReservedInstanceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for RegisterReservedInstance: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetSubscriptionAddon set subscription addon API
*/
func (a *Client) SetSubscriptionAddon(params *SetSubscriptionAddonParams, authInfo runtime.ClientAuthInfoWriter) (*SetSubscriptionAddonOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSubscriptionAddonParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SetSubscriptionAddon",
		Method:             "POST",
		PathPattern:        "/api/v1/Subscriptions/{subscriptionId}/addons",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetSubscriptionAddonReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetSubscriptionAddonOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SetSubscriptionAddon: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  SetSubscriptionTags set subscription tags API
*/
func (a *Client) SetSubscriptionTags(params *SetSubscriptionTagsParams, authInfo runtime.ClientAuthInfoWriter) (*SetSubscriptionTagsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetSubscriptionTagsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "SetSubscriptionTags",
		Method:             "POST",
		PathPattern:        "/api/v1/Subscriptions/{subscriptionId}/tags",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SetSubscriptionTagsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SetSubscriptionTagsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for SetSubscriptionTags: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Subscription subscription API
*/
func (a *Client) Subscription(params *SubscriptionParams, authInfo runtime.ClientAuthInfoWriter) (*SubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "Subscription",
		Method:             "GET",
		PathPattern:        "/api/v1/Subscriptions/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SubscriptionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SubscriptionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Subscription: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  UpdateSubscriptions update subscriptions API
*/
func (a *Client) UpdateSubscriptions(params *UpdateSubscriptionsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateSubscriptions",
		Method:             "PUT",
		PathPattern:        "/api/v1/Subscriptions/{id}",
		ProducesMediaTypes: []string{"application/json", "text/json", "text/plain"},
		ConsumesMediaTypes: []string{"application/*+json", "application/json", "application/json-patch+json", "text/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateSubscriptionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateSubscriptionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for UpdateSubscriptions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
