// Code generated by go-swagger; DO NOT EDIT.

package subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/bjerkio/crayon-api-go/models"
)

// NewSetSubscriptionAddonParams creates a new SetSubscriptionAddonParams object
// with the default values initialized.
func NewSetSubscriptionAddonParams() *SetSubscriptionAddonParams {
	var ()
	return &SetSubscriptionAddonParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetSubscriptionAddonParamsWithTimeout creates a new SetSubscriptionAddonParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetSubscriptionAddonParamsWithTimeout(timeout time.Duration) *SetSubscriptionAddonParams {
	var ()
	return &SetSubscriptionAddonParams{

		timeout: timeout,
	}
}

// NewSetSubscriptionAddonParamsWithContext creates a new SetSubscriptionAddonParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetSubscriptionAddonParamsWithContext(ctx context.Context) *SetSubscriptionAddonParams {
	var ()
	return &SetSubscriptionAddonParams{

		Context: ctx,
	}
}

// NewSetSubscriptionAddonParamsWithHTTPClient creates a new SetSubscriptionAddonParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetSubscriptionAddonParamsWithHTTPClient(client *http.Client) *SetSubscriptionAddonParams {
	var ()
	return &SetSubscriptionAddonParams{
		HTTPClient: client,
	}
}

/*SetSubscriptionAddonParams contains all the parameters to send to the API endpoint
for the set subscription addon operation typically these are written to a http.Request
*/
type SetSubscriptionAddonParams struct {

	/*Addon*/
	Addon *models.PostSubscriptionAddOn
	/*SubscriptionID*/
	SubscriptionID int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set subscription addon params
func (o *SetSubscriptionAddonParams) WithTimeout(timeout time.Duration) *SetSubscriptionAddonParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set subscription addon params
func (o *SetSubscriptionAddonParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set subscription addon params
func (o *SetSubscriptionAddonParams) WithContext(ctx context.Context) *SetSubscriptionAddonParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set subscription addon params
func (o *SetSubscriptionAddonParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set subscription addon params
func (o *SetSubscriptionAddonParams) WithHTTPClient(client *http.Client) *SetSubscriptionAddonParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set subscription addon params
func (o *SetSubscriptionAddonParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAddon adds the addon to the set subscription addon params
func (o *SetSubscriptionAddonParams) WithAddon(addon *models.PostSubscriptionAddOn) *SetSubscriptionAddonParams {
	o.SetAddon(addon)
	return o
}

// SetAddon adds the addon to the set subscription addon params
func (o *SetSubscriptionAddonParams) SetAddon(addon *models.PostSubscriptionAddOn) {
	o.Addon = addon
}

// WithSubscriptionID adds the subscriptionID to the set subscription addon params
func (o *SetSubscriptionAddonParams) WithSubscriptionID(subscriptionID int32) *SetSubscriptionAddonParams {
	o.SetSubscriptionID(subscriptionID)
	return o
}

// SetSubscriptionID adds the subscriptionId to the set subscription addon params
func (o *SetSubscriptionAddonParams) SetSubscriptionID(subscriptionID int32) {
	o.SubscriptionID = subscriptionID
}

// WriteToRequest writes these params to a swagger request
func (o *SetSubscriptionAddonParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Addon != nil {
		if err := r.SetBodyParam(o.Addon); err != nil {
			return err
		}
	}

	// path param subscriptionId
	if err := r.SetPathParam("subscriptionId", swag.FormatInt32(o.SubscriptionID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
