// Code generated by go-swagger; DO NOT EDIT.

package publishers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPublishersParams creates a new GetPublishersParams object
// with the default values initialized.
func NewGetPublishersParams() *GetPublishersParams {
	var ()
	return &GetPublishersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPublishersParamsWithTimeout creates a new GetPublishersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPublishersParamsWithTimeout(timeout time.Duration) *GetPublishersParams {
	var ()
	return &GetPublishersParams{

		timeout: timeout,
	}
}

// NewGetPublishersParamsWithContext creates a new GetPublishersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPublishersParamsWithContext(ctx context.Context) *GetPublishersParams {
	var ()
	return &GetPublishersParams{

		Context: ctx,
	}
}

// NewGetPublishersParamsWithHTTPClient creates a new GetPublishersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPublishersParamsWithHTTPClient(client *http.Client) *GetPublishersParams {
	var ()
	return &GetPublishersParams{
		HTTPClient: client,
	}
}

/*GetPublishersParams contains all the parameters to send to the API endpoint
for the get publishers operation typically these are written to a http.Request
*/
type GetPublishersParams struct {

	/*Names*/
	Names []string
	/*Page*/
	Page *int32
	/*PageSize*/
	PageSize *int32
	/*ProgramType*/
	ProgramType *string
	/*Search*/
	Search *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get publishers params
func (o *GetPublishersParams) WithTimeout(timeout time.Duration) *GetPublishersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get publishers params
func (o *GetPublishersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get publishers params
func (o *GetPublishersParams) WithContext(ctx context.Context) *GetPublishersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get publishers params
func (o *GetPublishersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get publishers params
func (o *GetPublishersParams) WithHTTPClient(client *http.Client) *GetPublishersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get publishers params
func (o *GetPublishersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNames adds the names to the get publishers params
func (o *GetPublishersParams) WithNames(names []string) *GetPublishersParams {
	o.SetNames(names)
	return o
}

// SetNames adds the names to the get publishers params
func (o *GetPublishersParams) SetNames(names []string) {
	o.Names = names
}

// WithPage adds the page to the get publishers params
func (o *GetPublishersParams) WithPage(page *int32) *GetPublishersParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get publishers params
func (o *GetPublishersParams) SetPage(page *int32) {
	o.Page = page
}

// WithPageSize adds the pageSize to the get publishers params
func (o *GetPublishersParams) WithPageSize(pageSize *int32) *GetPublishersParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get publishers params
func (o *GetPublishersParams) SetPageSize(pageSize *int32) {
	o.PageSize = pageSize
}

// WithProgramType adds the programType to the get publishers params
func (o *GetPublishersParams) WithProgramType(programType *string) *GetPublishersParams {
	o.SetProgramType(programType)
	return o
}

// SetProgramType adds the programType to the get publishers params
func (o *GetPublishersParams) SetProgramType(programType *string) {
	o.ProgramType = programType
}

// WithSearch adds the search to the get publishers params
func (o *GetPublishersParams) WithSearch(search *string) *GetPublishersParams {
	o.SetSearch(search)
	return o
}

// SetSearch adds the search to the get publishers params
func (o *GetPublishersParams) SetSearch(search *string) {
	o.Search = search
}

// WriteToRequest writes these params to a swagger request
func (o *GetPublishersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesNames := o.Names

	joinedNames := swag.JoinByFormat(valuesNames, "multi")
	// query array param Names
	if err := r.SetQueryParam("Names", joinedNames...); err != nil {
		return err
	}

	if o.Page != nil {

		// query param Page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("Page", qPage); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param PageSize
		var qrPageSize int32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatInt32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("PageSize", qPageSize); err != nil {
				return err
			}
		}

	}

	if o.ProgramType != nil {

		// query param ProgramType
		var qrProgramType string
		if o.ProgramType != nil {
			qrProgramType = *o.ProgramType
		}
		qProgramType := qrProgramType
		if qProgramType != "" {
			if err := r.SetQueryParam("ProgramType", qProgramType); err != nil {
				return err
			}
		}

	}

	if o.Search != nil {

		// query param Search
		var qrSearch string
		if o.Search != nil {
			qrSearch = *o.Search
		}
		qSearch := qrSearch
		if qSearch != "" {
			if err := r.SetQueryParam("Search", qSearch); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
