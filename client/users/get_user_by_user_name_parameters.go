// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetUserByUserNameParams creates a new GetUserByUserNameParams object
// with the default values initialized.
func NewGetUserByUserNameParams() *GetUserByUserNameParams {
	var ()
	return &GetUserByUserNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetUserByUserNameParamsWithTimeout creates a new GetUserByUserNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetUserByUserNameParamsWithTimeout(timeout time.Duration) *GetUserByUserNameParams {
	var ()
	return &GetUserByUserNameParams{

		timeout: timeout,
	}
}

// NewGetUserByUserNameParamsWithContext creates a new GetUserByUserNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetUserByUserNameParamsWithContext(ctx context.Context) *GetUserByUserNameParams {
	var ()
	return &GetUserByUserNameParams{

		Context: ctx,
	}
}

// NewGetUserByUserNameParamsWithHTTPClient creates a new GetUserByUserNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetUserByUserNameParamsWithHTTPClient(client *http.Client) *GetUserByUserNameParams {
	var ()
	return &GetUserByUserNameParams{
		HTTPClient: client,
	}
}

/*GetUserByUserNameParams contains all the parameters to send to the API endpoint
for the get user by user name operation typically these are written to a http.Request
*/
type GetUserByUserNameParams struct {

	/*UserName*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get user by user name params
func (o *GetUserByUserNameParams) WithTimeout(timeout time.Duration) *GetUserByUserNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get user by user name params
func (o *GetUserByUserNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get user by user name params
func (o *GetUserByUserNameParams) WithContext(ctx context.Context) *GetUserByUserNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get user by user name params
func (o *GetUserByUserNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get user by user name params
func (o *GetUserByUserNameParams) WithHTTPClient(client *http.Client) *GetUserByUserNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get user by user name params
func (o *GetUserByUserNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserName adds the userName to the get user by user name params
func (o *GetUserByUserNameParams) WithUserName(userName *string) *GetUserByUserNameParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the get user by user name params
func (o *GetUserByUserNameParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *GetUserByUserNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UserName != nil {

		// query param userName
		var qrUserName string
		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {
			if err := r.SetQueryParam("userName", qUserName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
